[{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/","title":"Học Python trên AWS","tags":[],"description":"","content":"Học Python trên AWS Tổng quan Bài thực hành này sẽ dạy cho bạn những kiến thức cơ bản về ngôn ngữ lập trình python bằng Amazon Web Services (AWS).\nBài thực hành này hướng đến những người mới bắt đầu chưa bao giờ lập trình bằng python và nó sử dụng các phương pháp giải thích cơ bản tương tự như các sách và hướng dẫn khác về ngôn ngữ lập trình python.\nMục đích chính của bài thực hành này nhằm giúp bạn bắt đầu xây dựng trên AWS hơn là học cách xây dựng một ứng dụng, website hay trực quan hóa dữ liệu bằng Python.\nNội dung: Giới thiệu Chuẩn bị Biến Các loại dữ liệu Python Packages Hàm Tham số và đối số Đầu vào Vòng lặp Câu lệnh if Logging Lỗi và ngoại lệ Dọn dẹp tài nguyên "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/10-if-statements/10.1-if-else-statement/","title":"Câu lệnh If - Else","tags":[],"description":"","content":"Chúng ta sẽ thêm một số kiểm tra điều kiện, sử dụng câu lệnh if. Chúng ta sẽ thực hiện kiểm tra đầu vào để đảm bảo rằng các thông số được cung cấp là giá trị hợp lệ mà Amazon Translate chấp nhận.\nSự tương đương Đôi khi chúng ta muốn kiểm tra xem hai giá trị có bằng nhau hay không. Chúng tôi không thể sử dụng = vì điều này chỉ dành để khai báo một biến. Để kiểm tra xem hai giá trị có bằng nhau nhau hay không, chúng ta cần sử dụng ==.\nTrường hợp hai giá trị bằng nhau, điều này sẽ trả về True và nếu họ không bằng nhau, nó sẽ trả về False\nChúng ta sẽ sử dụng ==: Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode SourceLanguageCode = \u0026#34;en\u0026#34; TargetLanguageCode = \u0026#34;fr\u0026#34; SourceLanguageCode == TargetLanguageCode Nhấn Enter. \u0026ldquo;en\u0026rdquo; khác với \u0026ldquo;fr\u0026rdquo; vì vậy SourceLanguageCode == TargetLanguageCode sẽ trả về False Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode SourceLanguageCode = \u0026#34;fr\u0026#34; TargetLanguageCode = \u0026#34;fr\u0026#34; SourceLanguageCode == TargetLanguageCode Nhấn Enter. \u0026ldquo;fr\u0026rdquo; và \u0026ldquo;fr\u0026rdquo; bằng nhau vì vậy SourceLanguageCode == TargetLanguageCode sẽ trả về True Chúng ta có thể sử dụng ctrl + d hoặc exit() để thoát khỏi Interactive Mode.\nChúng ta sẽ sử dụng câu lệnh if để tránh xảy ra lỗi khi cố dịch từ \u0026ldquo;en\u0026rdquo; đến \u0026ldquo;en\u0026rdquo;. Trong Cloud9 IDE, click + Click New File Trong phần code editor, thêm nội dung dưới đây: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # We use loads as we are loading from a string. # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) else: print(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) 5. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_7_equivalence.py Click Save Chúng ta nhập exit() trong Interactive Mode để thoát khỏi Interactive Mode Press Enter Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_7_equivalence.py Nhấn Enter Thay đổi file lab_7_equivalence.py giống như nội dung dưới đây: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;fr\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # We use loads as we are loading from a string. # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) else: print(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) Lưu lại. Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_7_equivalence.py Nhấn Enter. Chúng ta sẽ thấy câu lệnh if để ngăn lỗi khi chúng ta cố dịch từ \u0026ldquo;fr\u0026rdquo; thành \u0026ldquo;fr\u0026rdquo; Các toán tử Khi sử dụng câu lệnh if, bạn sẽ thường sử dụng các toán tử khác nhau để xác định tính tương đương. Dưới đây là một số toán tử mà python hỗ trợ\nPython Meaning == bằng nhau != không bằng nhau \u0026gt; lớn hơn \u0026lt; nhỏ hơn \u0026gt;= lớn hơn hoặc bằng \u0026lt;= nhở hơn hoặc bằng "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/4-data-types/4.1-string/","title":"Chuỗi(String)","tags":[],"description":"","content":"Chuỗi Kiểu dữ liệu chuỗi(string) trong Python là một trong các kiểu phổ biến nhất trong Python. Chuỗi ký tự trong python được bao quanh bởi dấu nháy đơn hoặc dấu nháy kép. Dưới đây là một số ví dụ:\n\u0026#34;The quick brown fox jumped over the lazy dog\u0026#34; \u0026#39;The quick brown fox jumped over the lazy dog\u0026#39; Nếu chúng ta muốn sử dụng dấu nháy đơn hoặc nháy kép trong chuỗi, chúng ta có thể sử dụng một trong những cách dưới đây:\n\u0026#39;The error message was \u0026#34;Incorrect DataType\u0026#34;\u0026#39; \u0026#34;The error message was \\\u0026#34;Incorrect DataType\\\u0026#34;\u0026#34; \u0026#39;The error message was \\\u0026#39;Incorrect DataType\\\u0026#39;\u0026#39; \u0026#34;The error message was \u0026#39;Incorrect DataType\u0026#39;\u0026#34; Trong terminal, nhập python và nhấp Enter để mở Interactive Mode Chuỗi(String) giống với tất cả các kiểu dữ liệu khác, chúng ta có thể gán vào biến. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode first_name = \u0026#34;Monty\u0026#34; last_name = \u0026#34;Python\u0026#34; Nhấn Enter Chúng ta đã tạo một biến Python gọi là first_name và gán cho nó giá trị \u0026ldquo;Monty\u0026rdquo;. Thêm vào đó, chúng ta đã tạo một biến khác gọi là last_name và gán cho nó giá trị \u0026ldquo;Python\u0026rdquo;.\nChúng ta có thể in giá trị của các biến bằng hàm print Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode print(first_name) print(last_name) Nhấn Enter. Cùng xem kết quả. Chúng ta có thể cộng chuỗi với nhau. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode print(first_name + last_name) Nhấn Enter. Cùng xem kết quả. Chúng có thể thấy rằng không có dấu cách trong chuỗi MontyPython. Để bao gồm một dấu cách, Chúng ta có thể thêm dấu cách dưới dạng một chuỗi riêng biệt. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode print(first_name + \u0026#34; \u0026#34; + last_name) Nhấn Enter. Cùng xem kết quả. Sử dụng biến trong chuỗi Khi muốn sử dụng giá trị của một biến ở giữa một chuỗi trong python, chúng ta có thể sử dụng một vài cách.\nDùng .format() để sử dụng giá trị của một biến ở giữa một chuỗi Dùng hàm .format(), chúng ta có thể sử dụng {} trong chuỗi của chúng ta để sử dụng giá trị của một biến ở giữa một chuỗi. Chúng ta sử dụng .format() phía sau chuỗi để đưa giá trị của biến vào giữa chuỗi. Với mỗi biến chúng ta sử dụng một dấu {} trong chuỗi. Nếu chúng ta có 2 biến chúng ta sẽ sử dụng 2 dấu {} trong chuỗi và phía sau chuỗi .format(variable_1, variable_2), giá trị của các biến trong dấu () của hàm .format() lần lượt ứng với vị trí của dấu {} trong chuỗi.\nNhập hoặc sao chép nội dung dưới đây vào Interactive Mode first_name = \u0026#34;John\u0026#34; surname = \u0026#34;Doe\u0026#34; print(\u0026#34;My first name is {}. My family name is {}\u0026#34;.format(first_name, surname)) Nhấn Enter. Cùng xem kết quả. Dùng f strings để sử dụng giá trị của một biến ở giữa một chuỗi Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode print(f\u0026#34;My first name is {first_name}. My family name is {surname}\u0026#34;) Nhấn Enter. Cùng xem kết quả. Có nhiều hành động hơn mà chúng ta có thể thực hiện trên chuỗi, nhưng chúng ta có đủ thông tin để bắt đầu sử dụng python với AWS. Bạn có thể tiếp tục tìm hiểu thêm hoặc chuyển sang phần tiếp theo.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/11-logging/11.1-simple-logging/","title":"Ghi log đơn giản","tags":[],"description":"","content":"Ghi log đơn giản Chúng ta sẽ thay thế các câu lệnh print() bằng logging để đưa đầu ra trong console. Sử dụng logging cho phép chúng tôi trả lại thông tin về cách chương trình đang hoạt động. Sử dụng các phương thức như print() cho phép chúng ta trả lại thông tin cho người dùng.\nTạo file lab_8_simple_logging.py Trong Cloud9 IDE, click + Click New File Trong phần code editor, thêm nội dung dưới đây: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) else: print(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) 3. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_8_simple_logging.py Click Save Chúng tôi vừa dùng print() để xuất các thông báo ra bảng điều khiển. Đó là nơi chúng ta cần thực hiện các thay đổi đối với mã để thêm chúng vào nhật ký thay vì xuất ra bảng điều khiển. Thay đổi file lab_8_simple_logging.py giống như nội dung dưới đây: # Import logging import logging import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: logging.warning(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) # This will print to the console as the default level is warning else: logging.info(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) # This will not print to the console because it is lower than warning Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_8_simple_logging.py --file translate_input.json Nhấn Enter. Chúng ta cùng xem kết quả Điều này sẽ không trả lại gì cho bảng điều khiển. Điều này là do theo mặc định, ghi log được đặt thành logging.warning. Bởi vì mã là chính xác, nó không tạo ra một cảnh báo nào.\nThay đổi lab_8_simple_logging.py giống như nội dung dưới đây: # Import logging import logging import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;en\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: logging.warning(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) # This will print to the console as the default level is warning else: logging.info(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) # This will not print to the console because it is lower than warning Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_8_simple_logging.py --file translate_input.json Nhấn Enter. Chúng ta cùng xem kết quả. We will see the WARNING log. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/1-introduction/","title":"Giới thiệu","tags":[],"description":"","content":"Giới thiệu Bài thực hành này sẽ dạy cho bạn những kiến thức cơ bản về ngôn ngữ lập trình python bằng Amazon Web Services (AWS).\nBài thực hành này hướng đến những người mới bắt đầu chưa bao giờ lập trình bằng python và nó sử dụng các phương pháp giải thích cơ bản tương tự như các sách và hướng dẫn khác về ngôn ngữ lập trình python.\nMục đích chính của bài thực hành này nhằm giúp bạn bắt đầu xây dựng trên AWS hơn là học cách xây dựng một ứng dụng, website hay trực quan hóa dữ liệu bằng Python.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/6-functions/6.1-simple-function/","title":"Hàm đơn giản","tags":[],"description":"","content":"Hàm đơn giản Trong python, chúng ta có thể khai báo một hàm bằng cú pháp: def function_name():\nMột hàm bắt đầu bằng def, có tên viết thường, với các từ được phân tách bằng dấu gạch dưới để chúng ta có thể dễ đọc hơn, trong dấu () chứa các tham số và cuối cùng là dấu :.\nTạo một hàm đơn giản Trong phần đầu của Cloud9 IDE. Click + Click New File để tạo file mới Trong phần code editor, thêm nội dung dưới đây: # A function that prints hello world def hello_world(): print(\u0026#39;hello world\u0026#39;) # This line calls (runs) the function hello_world() 3. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_1_hello_world.py Đuôi .py cho thấy rằng đây là một tệp python.\nClick Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_1_hello_world.py Nhấn Enter Hàm trả lại giá trị Để hàm trả lại giá trị chúng ta sử dụng return.\nThay đổi file lab_1_hello_world.py giống như nội dung dưới đây: # A function that returns hello world def hello_world(): return \u0026#39;hello world\u0026#39; # Assign the hello_world() function to a variable. greeting = hello_world() print(greeting) Lưu lại. Chúng ta đã tạo ra một hàm trả lại giá trị. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/8-input/8.1-user-input-from-the-console/","title":"Nhập dữ liệu từ console","tags":[],"description":"","content":"Nhập dữ liệu từ console Trong phần này, chúng ta tìm hiểu cách cung cấp thông tin đầu vào của người dùng khi chương trình được chạy và chuyển thông tin này cho hàm.\nTạo file lab_5_console_input.py Click + Click New File Trong phần code editor, thêm nội dung dưới đây: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) ### Change below this line only ### kwargs={ \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } def main(): translate_text(**kwargs) if __name__==\u0026#34;__main__\u0026#34;: main() 3. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập lab_5_console_input.py Click Save Để chuyển đầu vào cho hàm của chúng ta khi chúng ta chạy tệp có tên lab_5_console_input.py, chúng ta cần sử dụng hàm input(). Thao tác này sẽ nhắc người dùng bằng một thông báo và sau đó đợi họ cung cấp thông tin đầu vào. Thay đổi file lab_5_console_input.py giống như nội dung dưới đây: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) ### Change below this line only ### text = input(\u0026#34;Provide the text you want translating: \u0026#34;) source_language_code = input(\u0026#34;Provide the two letter source language code: \u0026#34;) target_language_code = input(\u0026#34;Provide the two letter target language code: \u0026#34;) def main(): translate_text( Text=text, SourceLanguageCode=source_language_code, TargetLanguageCode=target_language_code ) if __name__==\u0026#34;__main__\u0026#34;: main() Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_5_console_input.py Nhấn Enter. Tại dòng Provide the text you want translating:, nhập I am learning to code in AWS và nhấn Enter Tại dòng Provide the two letter source language code:, nhập en và nhấn Enter Tại dòng Provide the two letter target language code:, nhập fr và nhấn Enter Chương trình sẽ đợi bạn cung cấp giá trị trước khi yêu cầu lời nhắc tiếp theo.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/2-prepare/2.1-create-cloud9/","title":"Tạo Cloud9","tags":[],"description":"","content":"Tạo Cloud9 AWS Cloud9 là môi trường phát triển tích hợp dựa trên đấm mây(IDE). Nó cho phép chúng ta viết code, chạy và gỡ lỗi trên trình duyệt. Nó được đóng gói sẵn các công cụ thiết yếu bao gồm cả Python.\nTruy cập Amazon Cloud9 Console. Click Create environment. Tại mục Name, nhập LearnPython Click Next step Click Next step Click Create environment Môi trường AWS Cloud9 đã được tạo "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/12-errors-and-exceptions/12.1-simple-example/","title":"Ví dụ đơn giản","tags":[],"description":"","content":"Ví dụ đơn giản Trong python, chúng ta xử lý các ngoại lệ bằng cách sử dụng một khối try-exception bao bọc xung quanh mã của chúng ta. Python sử dụng câu lệnh try để thử chạy mã và sử dụng câu lệnh except nếu mã trả về một số loại lỗi.\nTài liệu cung cấp chi tiết về cách thực hiện điều này. Chúng ta sẽ bắt đầu với một ví dụ.\nTạo file lab_9_errors.py Trong Cloud9 IDE, click + Click New File Trong phần code editor, thêm nội dung dưới đây: integer = 50 string = \u0026#34;The number is\u0026#34; print(string + integer) 3. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_9_errors.py Click Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_9_errors.py Nhấn Enter. Chúng ta cùng xem kết quả Chương trình trả về TypeError bởi vì chúng ta không thể cộng chuỗi và số nguyên mà không chuyển đổi số nguyên thành chuỗi bằng cách sử dụng str()\nChúng ta thêm khối try-except. Thay đổi file lab_9_errors.py giống như nội dung dưới đây: import logging integer = 50 string = \u0026#34;The number is\u0026#34; try: print(string + integer) except TypeError as err: logging.warning(\u0026#34;Error - {}. You cannot add a string to an integer, without converting the integer to a string first\u0026#34;.format(err)) Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_9_errors.py Nhấn Enter. Chúng ta cùng xem kết quả Thêm câu lệnh Except Câu lệnh except ở trên sẽ chỉ hoạt động cho lỗi TypeError vì chúng ta đã chỉ định điều này trong câu lệnh except.\nChúng ta có thể dùng nhiều câu lệnh except trong đó cung cấp thông tin chi tiết để xử lý các trường hợp có các loại lỗi khác nhau.\nĐây là một ví dụ:\nimport logging integer = 50 string = \u0026#34;The number is\u0026#34; try: print(string + integer) except TypeError as t_err: logging.warning(\u0026#34;Error - {}. You cannot add a string to an integer, without converting the integer to a string first\u0026#34;.format(t_err)) except ValueError as v_err: logging.warning(\u0026#34;Error - {}. Your message\u0026#34;.format(v_err)) Các ngoại lệ được tạo bởi AWS Boto3 Chúng tôi có thể thấy các ngoại lệ được tạo ra bởi các dịch vụ AWS mà chúng tôi đang gọi. Chúng được trả lại bởi Boto3 bằng cách sử dụng botocore. Chúng ta cần thêm câu lệnh import và sau đó chúng ta sử dụng câu lệnh try-exception. Dưới đây là một ví dụ.\nimport logging import boto3 from botocore.exceptions import ClientError try: client = boto3.client(\u0026#39;translate\u0026#39;) except ClientError as e: logging.warning(\u0026#34;\u0026lt;your msg\u0026gt; {}\u0026#34;.format(e)) "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/9-loop/9.1-simple-loop/","title":"Vòng lặp đơn giản","tags":[],"description":"","content":"Vòng lặp đơn giản Chúng ta sẽ tạo một ví dụ đơn giản trong Python Interactive Mode để hiển thị cách hoạt động của vòng lặp qua danh sách.\nTạo một danh sách và gán nó cho một biến: Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode fruit = [\u0026#39;apples\u0026#39;,\u0026#39;oranges\u0026#39;,\u0026#39;bananas\u0026#39;] Nhấn Enter Tạo vòng lặp for và in ra từng phần từ trong danh sách Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode for item in fruit: print(f\u0026#39;The best fruit now is {item}\u0026#39;) Nhấn hai lần Enter. Chúng ta cùng xem kết quả Nếu chúng ta muốn sử dụng một vòng lặp như một bộ đếm, chúng ta có thể tạo một danh sách các số và gán nó cho một biến Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode numbers = [0,1,2,3,4,5,6,7,8,9,10] Nhấn Enter Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode for number in numbers: print(f\u0026#39;The next number is {number}\u0026#39;) Ví dụ này in tất cả các số từ 0 đến 10\nNhấn hai lần Enter. Chúng ta cùng xem kết quả Ví dụ trước in tất cả các số từ 0 đến 10, nhưng nếu chúng ta muốn đếm đến 1000. Sẽ rất tẻ nhạt nếu viết tất cả các số theo cách này. Thay vì nó ta sử dụng hàm range(). Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode for number in range(10): print(f\u0026#39;The next number is {number}\u0026#39;) Nhấn hai lần Enter. Chúng ta cùng xem kết quả Ví dụ trước, chúng ta có thể thấy rằng bắt đầu ở 0 là số đầu tiên, nếu chúng ta muốn bắt đầu đếm từ 1, chúng ta vẫn có thể sử dụng hàm range(). Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode for number in range(1,10): print(f\u0026#39;The next number is {number}\u0026#39;) Nhấn hai lần Enter. Chúng ta cùng xem kết quả Nếu chúng ta muốn tăng bộ đếm nhiều hơn giá trị mặc định là 1, ví dụ như chúng ta chỉ muốn các số lẻ hoặc số chẵn chẳng hạn. Để làm điều này, chúng ta thêm một tham số thứ ba vào hàm range() Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode for number in range(1,10,2): print(f\u0026#39;The next number is {number}\u0026#39;) Hàm range(start, stop, step) bao gồm 3 tham số:\nstart : Không bắt buộc. Một số nguyên chỉ định vị trí bắt đầu. Mặc định là 0.\nstop : Bắt buộc. Một số nguyên chỉ định vị trí dừng (không được bao gồm).\nstep : Không bắt buộc. Một số nguyên xác định bước tăng. Mặc định là 1\nNhấn hai lần Enter. Chúng ta cùng xem kết quả "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/6-functions/6.2-boto3/","title":"Boto3","tags":[],"description":"","content":"Boto3 Chúng ta sẽ sử dụng Amazon Translate để dịch một vài văn bản từ tiếng Anh sang tiếng Pháp.\nĐầu tiên chúng ta hãy tìm hiểu Boto3 documentation for Amazon Translate\nTrong phần client, nó cho chúng ta biết cách sử dụng dịch vụ dịch trong chương trình của chúng ta.\nTrong tài liệu Boto3 cho AWS Translate, chúng ta có thể thấy rằng nó hỗ trợ các cách khác nhau. Chúng ta có thể khám phá nếu chúng ta muốn. Chúng ta sẽ sử dụng method translate_text() trong chương trình của chúng ta.\nCú pháp của request như sau:\nresponse = client.translate_text( Text=\u0026#39;string\u0026#39;, TerminologyNames=[ \u0026#39;string\u0026#39;, ], SourceLanguageCode=\u0026#39;string\u0026#39;, TargetLanguageCode=\u0026#39;string\u0026#39; ) Đọc tài liệu bạn sẽ thấy rằng hàm translate_text() có ba tham số bắt buộc và một tham số không bắt buộc.\nText - bắt buộc TerminologyNames - không bắt buộc SourceLanguageCode - bắt buộc TargetLanguageCode - bắt buộc Tất cả những thứ này đều là kiểu String, ngoại trừ TerminologyNames, là list chứa các giá trị kiểu String. Nhưng chúng ta có thể bỏ qua TerminologyName vì nó là không bắt buộc và chúng ta chưa cần sử dụng nó.\nGiá trị SourceLanguageCode và TargetLanguageCode được liệt kê trong tài liệu\nChúng ta sẽ sử dụng tiếng Ang và tiếng Pháp, với mã là en và fr. Click + Click New File Trong phần code editor, thêm nội dung dưới đây: import boto3 client = boto3.client(\u0026#39;translate\u0026#39;) #### Add the new text below this line #### def translate_text(): # declare the function using def, name, braces for parameters and a colon response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, # Assigning the value of the string to the variable Text SourceLanguageCode=\u0026#39;en\u0026#39;, # We are using a two letter language code from the documentation (en = English) TargetLanguageCode=\u0026#39;fr\u0026#39; # We use a second two letter language code from the documentation (fr = French) ) Khi một cái gì đó mới được giới thiệu, mã được đánh dấu bằng các nhận xét. Trong python, bất kỳ thứ gì theo sau \u0026rsquo;#\u0026rsquo; sẽ là nhận xét và bị python bỏ qua.\n3. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập lab_2_intro_to_boto3.py Click Save Chúng ta đã tạo hàm và gán giá trị cho các biến của mình, chúng ta cần in ra để chúng ta có thể nhìn thấy nó. Thay đổi file lab_2_intro_to_boto3.py giống như nội dung dưới đây: import boto3 client = boto3.client(\u0026#39;translate\u0026#39;) def translate_text(): response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, SourceLanguageCode=\u0026#39;en\u0026#39;, TargetLanguageCode=\u0026#39;fr\u0026#39; ) #### Add the new text below this line #### print(response) # this code is inside the function and will print the contents of the variable \u0026#39;response\u0026#39; translate_text() # This line will call our function. Without it, python will not do anything. Nhấn tổ hợp phím Ctrl + s để lưu lại. Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_2_intro_to_boto3.py Nhấn Enter. Cùng xem kết quả. Nếu bạn tham khảo tài liệu, nó sẽ hiển thị như sau:\nReturn type dict Returns Response Syntax { \u0026#39;TranslatedText\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;SourceLanguageCode\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;TargetLanguageCode\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;AppliedTerminologies\u0026#39;: [ { \u0026#39;Name\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;Terms\u0026#39;: [ { \u0026#39;SourceText\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;TargetText\u0026#39;: \u0026#39;string\u0026#39; }, ] }, ] } Điều này cho chúng ta biết rằng AWS đang trả về dữ liệu dưới dạng từ điển với một cú pháp cụ thể.\nSo sánh những gì đã được trả về từ chương trình của chúng ta với cấu trúc trong tài liệu. Chúng ta sẽ thấy rằng nó tuân theo cấu trúc được nêu trong tài liệu cộng với một số dữ liệu từ dịch vụ AWS. Định dạng này không dễ đọc đối với chúng ta nhưng nó là định dạng được sử dụng để trao đổi thông tin giữa các chương trình và mô-đun. Trong phần sau, chúng ta sẽ tìm hiểu cách trích xuất dữ liệu từ cấu trúc này để trình bày nó ở định dạng dễ đọc hơn cho chúng ta.\nNếu chúng ta nhìn vào giá trị TranslatedText, chúng ta sẽ thấy \u0026ldquo;J\u0026rsquo;apprends à coder dans AWS\u0026rdquo;. Đó chính là văn bản tiếng Pháp trả về bởi Amazon Translate\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/2-prepare/","title":"Chuẩn bị","tags":[],"description":"","content":"Tổng quan Trong phần này chúng ta sẽ tạo Cloud9 IDE, tìm hiểu về Python Version và tìm hiểu về Virtual Environments.\nNội dung: Tạo Cloud9 Phiên bản của Python Virtual Environments "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/8-input/8.2-cli-arguments/","title":"CLI Arguments","tags":[],"description":"","content":"CLI Arguments Trong phần trước, chúng ta đã có thể nhắc người dùng nhập vào thông tin nhưng cách này sẽ rất tốn thời gian và không tiện lợi. Nên chúng ta cần một phương pháp truyền các tham số tốt hơn và chúng ta có thể sử dụng Command Line Interface (CLI)\nTạo file lab_5_cli_arguments.py Click + Click New File Trong phần code editor, thêm nội dung dưới đây: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) ### Change below this line only ### text = input(\u0026#34;Provide the text you want translating: \u0026#34;) source_language_code = input(\u0026#34;Provide the two letter source language code: \u0026#34;) target_language_code = input(\u0026#34;Provide the two letter target language code: \u0026#34;) def main(): translate_text( Text=text, SourceLanguageCode=source_language_code, TargetLanguageCode=target_language_code ) if __name__==\u0026#34;__main__\u0026#34;: main() 3. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập lab_5_cli_arguments.py Click Save Chúng ta sẽ sử dụng argparse để truyền các đối số từ CLI Thay đổi file lab_5_cli_arguments.py giống như nội dung dưới đây: import argparse # argparse is a built in python package, we add it with an import statement import boto3 # Define the parser variable to equal argparse.ArgumentParser() parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) # Add each of the arguments using the parser.add_argument() method parser.add_argument( \u0026#39;--text\u0026#39;, dest=\u0026#34;Text\u0026#34;, type=str, help=\u0026#34;The text to translate. The text string can be a maximum of 5,000 bytes long. Depending on your character set, this may be fewer than 5,000 characters\u0026#34;, required=True ) parser.add_argument( \u0026#39;--source-language-code\u0026#39;, dest=\u0026#34;SourceLanguageCode\u0026#34;, type=str, help=\u0026#34;The language code for the language of the source text. The language must be a language supported by Amazon Translate.\u0026#34;, required=True ) parser.add_argument( \u0026#39;--target-language-code\u0026#39;, dest=\u0026#34;TargetLanguageCode\u0026#34;, type=str, help=\u0026#34;The language code requested for the language of the target text. The language must be a language support by Amazon Translate.\u0026#34;, required=True ) # This will inspect the command line, convert each argument to the appropriate type and then invoke the appropriate action. args = parser.parse_args() def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) def main(): # vars() is an inbuilt function which returns a dictionary object translate_text(**vars(args)) if __name__==\u0026#34;__main__\u0026#34;: main() Chúng ta đã sử dụng parser.add_argument() để thêm từng đối số.\nVí dụ tên đối số: --text.\nGiá trị dest được yêu cầu để làm cho nó trở thành đối số từ khóa giá trị được chấp nhận bởi tham số, nếu không nó sẽ sử dụng đối số mặc định text=\u0026ldquo;value\u0026rdquo; nó phải là Text=\u0026ldquo;value\u0026rdquo;\ntype là kiểu dữ liệu string(str).\nhelp là nội dung trợ giúp.\nargs = parser.parse_args() sẽ kiểm tra dòng lệnh, chuyển đổi từng đối số thành kiểu thích hợp.\nkhi chúng ta gọi hàm translate_text() chúng ta cần sử dụng **vars(args). **vars biến đối tượng của chúng tôi được tạo ra bởi args = parser.parse_args() vào một đối tượng từ điển mà chúng ta có thể chuyển dưới dạng cặp key\\:value đến hàm của chúng ta\nLưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_5_cli_arguments.py --text \u0026#34;we are learning python on AWS\u0026#34; --source-language-code en --target-language-code fr Nhấn Enter. Chúng tôi đã thêm các tham số trên CLI.\nMỗi tham số liên quan đến mỗi khối parser.add_argument.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/10-if-statements/10.2-checking-value-in-the-list/","title":"Kiểm tra giá trị trong danh sách","tags":[],"description":"","content":"Kiểm tra giá trị trong danh sách Amazon Translate chỉ hỗ trợ một danh sách các ngôn ngữ được xác định. Danh sách mã ngôn ngữ mà Amazon Translate sẽ chấp nhận được cung cấp trong tài liệu. Chúng ta có thể sử dụng câu lệnh if để thực hiện một số xác thực đầu vào để kiểm tra xem mã ngôn ngữ có trong danh sách hay không.\nTạo file lab_7_check_language.py Trong Cloud9 IDE, click + Click New File Trong phần code editor, thêm nội dung dưới đây: import json # A defined list of languages supported by Amazon Translate languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;,\u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;,\u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;,\u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34;] # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Extracts the SourceLanguageCode and TargetLanguageCode from the JSON SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # Uses an if-else statement to check that the SourceLanguageCode is in the languages list. if SourceLanguageCode in languages: print(\u0026#34;The SourceLanguageCode is valid - proceeding\u0026#34;) else: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) 3. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_7_check_language.py Click Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_7_check_language.py Nhấn Enter. Chúng ta cùng xem kết quả Chúng tôi đã sử dụng câu lệnh if kết hợp với in để kiểm tra xem mã ngôn ngữ có hợp lệ hay không.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/4-data-types/4.2-numbers/","title":"Kiểu số","tags":[],"description":"","content":"Dữ liệu kiểu số integer là kiểu số nguyên, chẳng hạn như 50. integer được viết tắt là int.\nSố thực(float) là một kiểu dữ liệu số. Ví dụ: 99.9\nSử dụng biến kiểu số trong chuỗi In the previous section on strings you learnt that you can use the + to add strings together to form sentences. You also learned that you can insert variables into a sentence using the {}.\nWhat happens if we try to use a number with these two different methods?\nTrong phần trước, chúng ta có thể sử dụng + để cộng các chuỗi lại với nhau. Chúng ta cũng có thể chèn giá trị của biến vào chuỗi sử dụng {}. Chúng ta cùng thử dùng để cộng một số với một chuỗi.\nNhập hoặc sao chép nội dung dưới đây vào Interactive Mode my_int = 50 sentence = \u0026#34;The total comes to: \u0026#34; print(sentence + my_int) Nhấn Enter. Chúng ta sẽ thấy lỗi TypeError. Lỗi TypeErrors rất phổ biến khi chúng ta học python. Python cho chúng ta biết rằng chúng ta đang gặp lỗi về kiểu dữ liệu. Trong trường hợp này, chúng ta không thể cộng một chuỗi và một số với nhau.\nSửa lỗi bằng cách chuyển đổi kiểu dữ liệu int thành kiểu dữ liệu str. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode my_int = 50 sentence = \u0026#34;The total comes to: \u0026#34; print(sentence + str(my_int)) Nhấn Enter. Cùng xem kết quả. Chúng ta đã sử dụng phương thức str() để chuyển đổi biến từ số nguyên thành chuỗi. Trong hầu hết các trường hợp, python sẽ xác định kiểu dữ liệu mà không cần phải khai báo. Tuy nhiên, có thể hữu ích khi cho python biết chính xác kiểu dữ liệu mà chúng ta muốn xử lý. Những ví dụ khác:\nstr() trả về một chuỗi int() trả về một số nguyên float() trả về một số thực bool() trả về giá trị True hoặc False "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/11-logging/11.2-log-level-and-log-file/","title":"Log Level và Log File","tags":[],"description":"","content":"Log Level và Log File Logging level mặc định được đặt là warning. This can be changed so that we capture more or less information in the log files. Điều này có thể được thay đổi vì vậy chúng ta có thể nắm bắt được nhiều hơn hoặc ít hơn thông tin trong các Log File.\nChúng ta sẽ thay đổi Logging level mặc định và lưu đầu ra của chúng ta thành tệp log cục bộ trên Cloud9 instance. Điều này được thực hiện bằng cách thêm dòng sau để cấu hình Logging level:\nlogging.basicConfig(filename=\u0026#39;example.log\u0026#39;,level=logging.DEBUG) Tạo file lab_8_log_level.py Trong Cloud9 IDE, click + Click New File Trong phần code editor, thêm nội dung dưới đây: # Import logging import logging import json # Set the log level in the basic configuration. This means we will capture all our log entries and not just those at Warning or above. logging.basicConfig(filename=\u0026#39;example.log\u0026#39;,level=logging.DEBUG) # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: logging.warning(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) # This will print to the console as the default level is warning else: logging.info(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) # This will not print to the console because it is lower than warning 3. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_8_log_level.py Click Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_8_log_level.py Nhấn Enter. Chúng ta sẽ thấy file example.log đã được tạo Mở file example.log để xem logs Mở file lab_8_log_level.py Thay đổi file lab_8_log_level.py giống như nội dung dưới đây: # Import logging import logging import json # Set the log level in the basic configuration. This means we will capture all our log entries and not just those at Warning or above. logging.basicConfig(filename=\u0026#39;example.log\u0026#39;,level=logging.DEBUG) # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;en\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: logging.warning(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) # This will print to the console as the default level is warning else: logging.info(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) # This will not print to the console because it is lower than warning Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_8_log_level.py Nhấn Enter. Mở file example.log để xem tất cả các log "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/2-prepare/2.2-python-version/","title":"Phiên bản của Python","tags":[],"description":"","content":"Kiểm tra phiên bản của Python Trong môi trường AWS Cloud9: Trong terminal, nhập python Nhấn Enter. Chúng ta sẽ thấy phiên bản của Python là 3.7.10 Phiên bản của Python có thể thay đổi thành phiên bản sau của Python( ví dụ: 3.8 hoặc 3.10).\nInteractive Mode Trong Interactive Mode, chúng ta có thể nhập lệnh python trực tiếp vào và chúng sẽ chạy. Đây là một công cụ tuyệt vời để kiểm tra nhanh các lệnh python.\nChúng ta cùng dùng thử Interactive Mode bằng cách nhập hoặc sao chép nội dung dưới đây vào Interactive Mode phía sau \u0026raquo;\u0026gt; some_string = \u0026#34;Hello Python\u0026#34; print(some_string) Nhấn Enter. Chúng ta cùng xem kết quả Chúng ta đã tạo biến python đầu tiên gọi là some_string và gán cho nó giá trị \u0026ldquo;Hello Python\u0026rdquo;.\nSau đó chúng ta in giá trị của biến đó bằng hàm print.\nĐể thoát khỏi Interactive Mode chúng ta sử dụng crtl + d hoặc nhập exit() và nhấp Enter "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/12-errors-and-exceptions/12.2-add-error-handling-to-the-code/","title":"Thêm Error Handling vào code","tags":[],"description":"","content":"Thêm Error Handling vào code Chúng ta sẽ thêm error handling vào mã của mình dựa trên ví dụ ở phần trước. Trong Cloud9 IDE, click + Click New File Trong phần code editor, thêm nội dung dưới đây: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError # Add our input validation as a function here. def input_validation(item): languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: print(\u0026#34;There is an issue\u0026#34;) return False # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() 3. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_9_add_errors_handling.py Click Save Chúng ta sẽ thêm khối try-except block Thay đổi file lab_9_add_errors_handling.py giống như nội dung dưới đây: # Standard Imports import argparse import json # import logging import logging # 3rd Party Imports import boto3 from botocore.exceptions import ClientError # Set the logging file and default. The default is \u0026#39;Warning\u0026#39; logging.basicConfig(filename=\u0026#39;translate.log\u0026#39;,level=logging.DEBUG) # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): try: with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] except FileNotFoundError as e: logging.warning(\u0026#34;Error {}. Sorry the input file could not be found, check and try again\u0026#34;.format(e)) # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): try: client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) except ClientError as e: logging.warning(\u0026#34;Botocore generated an error {}\u0026#34;.format(e)) # Add a Loop to iterate over the json file. def translate_loop(): try: input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError except: logging.warning(\u0026#34;An error has caused the translation to fail, check the logs for details\u0026#34;) # Add our input validation as a function here. def input_validation(item): try: languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: logging.debug(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: logging.warning(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: logging.warning(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: logging.warning(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: logging.info(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: logging.warning(\u0026#34;There is an issue\u0026#34;) return False except: logging.warning(\u0026#34;An unspecified error has occurred \u0026#34;) # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_9_add_errors_handling.py --file translate_input.json Nhấn Enter. Mã sử dụng câu lệnh try. Nếu có ngoại lệ xảy ra câu lệnh except sẽ nói cho chúng ta biết.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/9-loop/9.2-looping-over-json/","title":"Vòng lặp với JSON","tags":[],"description":"","content":"Lặp qua dictionaries và JSON Mở file translate_input.json Thay đổi file translate_input.json giống như nội dung dưới đây: { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;What is cloud computing?\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;Cloud computing is the on-demand delivery of IT resources over the Internet with pay-as-you-go pricing.\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;Instead of buying, owning, and maintaining physical data centers and servers, you can access technology services, such as computing power, storage, and databases, on an as-needed basis from a cloud provider like Amazon Web Services (AWS)\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;Who is using cloud computing?\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;Organizations of every type, size, and industry are using the cloud for a wide variety of use cases, such as data backup, disaster recovery, email, virtual desktops, software development and testing, big data analytics, and customer-facing web applications.\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;For example, healthcare companies are using the cloud to develop more personalized treatments for patients. Financial services companies are using the cloud to power real-time fraud detection and prevention.\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;And video game makers are using the cloud to deliver online games to millions of players around the world.\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } Lưu lại Tạo file lab_6_loops.py Click + Click New File Trong phần code editor, thêm nội dung dưới đây: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True) args = parser.parse_args() # Functions def open_input(): \u0026#34;\u0026#34;\u0026#34;This function returns a dictionary containing the contents of the Input section in the input file\u0026#34;\u0026#34;\u0026#34; with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: # Here we iterate over all dictionaries in the Input list translate_text(**item) # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() 4. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập lab_6_loops.py Click Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_6_loops.py --file translate_input.json Nhấn Enter. Chúng ta cùng xem kết quả. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/4-data-types/4.3-dictionaries/","title":"Dictionaries","tags":[],"description":"","content":"Dictionaries Kiểu dữ liệu Dictionary trong Python là một tập hợp các cặp key-value. Nó sử dụng key duy nhất để định danh và value để lưu trữ giá trị. Key phải là một kiểu dữ liệu không thay đổi (immutable) như chuỗi, số hoặc tuple. Value có thể là bất kỳ kiểu giá trị nào. Dictionary được khởi tạo với các dấu ngoặc nhọn {} và chúng có các khóa và giá trị (key-value). Mỗi cặp key-value được xem như là một item.\nDictionaries rất phổ biến trong AWS, vì vậy chúng ta sẽ thấy chúng thường xuyên:\nChúng được sử dụng để trao đổi thông tin giữa các dịch vụ và chức năng khác nhau Chúng được trả lại bởi API(Application Programming Interfaces) Chúng được sử dụng như giá trị Tag Tạo dictionary Dictionaries có thể được tạo bằng cách gán các key-value mà bạn muốn lưu trữ trong dictionary.\nNhập hoặc sao chép nội dung dưới đây vào Interactive Mode user = {\u0026#34;first_name\u0026#34;:\u0026#34;Ada\u0026#34;} print(user) Nhấn Enter. Cùng xem kết quả. Chúng ta có thể tạo dictionary rỗng bằng 2 cách. Gán {} vào một biến, nhập hoặc sao chép nội dung dưới đây vào Interactive Mode first_empty_dictionary = {} print(first_empty_dictionary) Nhấn Enter. Sử dụng hàm tạo dict(), nhập hoặc sao chép nội dung dưới đây vào Interactive Mode second_empty_dictionary = dict() print(second_empty_dictionary) Nhấn Enter. Cùng xem kết quả. Đọc dictionary Để đọc value được liên kết với key, bạn cần cung cấp tên của dictionary và giá trị của key bên trong dấu ngoặc vuông.\nNhập hoặc sao chép nội dung dưới đây vào Interactive Mode user = {\u0026#34;first_name\u0026#34;:\u0026#34;Ada\u0026#34;} print(user[\u0026#34;first_name\u0026#34;]) Nhấn Enter. Cùng xem kết quả. Chúng ta đã đọc được giá trị được liên kết với key có giá trị first_name của dictionary có tên user Cập nhật dictionary Dictionaries có thể thay đổi sau khi tạo. Chúng ta có thể thêm, cập nhật hoặc xóa các cặp key-value trong dictionary.\nĐể thêm cặp key-value vào dictionary, chúng ta thực hiện như ví dụ dưới đây Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode user[\u0026#34;family_name\u0026#34;] = \u0026#34;Byron\u0026#34; print(user) Nhấn Enter. Chúng ta đã thêm một cặp key-value vào dictionary có tên user Để sửa đổi một giá trị theo cách tương tự để thêm nó. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode user[\u0026#34;family_name\u0026#34;] = \u0026#34;Lovelace\u0026#34; print(user) Nhấn Enter. Cùng xem kết quả. Chúng ta đã thay đổi giá trị được liên kết với key là first_name thành \u0026ldquo;Lovelace\u0026rdquo; Để xóa một cặp key-value, chúng ta sẽ sử dụng câu lệnh del Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode del user[\u0026#34;family_name\u0026#34;] print(user) Nhấn Enter. Cùng xem kết quả. Chúng ta đã xóa cặp key-value có key là first_name "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/10-if-statements/10.3-elif/","title":"Elif","tags":[],"description":"","content":"Elif Câu lệnh and là một toán tử logic kết hợp việc kiểm tra cả ngôn ngữ nguồn và ngôn ngữ đích. Câu lệnh elif cho phép chúng ta đưa ra nhiều phép kiểm tra logic khác nhau.\nTạo file lab_7_elif.py Trong Cloud9 IDE, click + Click New File Trong phần code editor, thêm nội dung dưới đây: import json # A defined list of languages supported by Amazon Translate languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;,\u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;,\u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;,\u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34;] # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # Uses an if-elif-else statements to check that the SourceLanguageCode is in the languages list. if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanaguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) else: print(\u0026#34;There is an issue\u0026#34;) 3. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_7_elif.py Click Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_7_elif.py Nhấn Enter. Chúng ta cùng xem kết quả Chúng ta sẽ kiểm tra bằng cách thay đổi các giá trị của SourceLanguageCode và giá trị của TargetLanguageCode Thay đổi SourceLanguageCode và TargetLanguageCode thành giá trị giống nhau. Thay đổi file lab_7_elif.py giống như nội dung dưới đây: import json # A defined list of languages supported by Amazon Translate languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;,\u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;,\u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;,\u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34;] # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;en\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # Uses an if-elif-else statements to check that the SourceLanguageCode is in the languages list. if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanaguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) else: print(\u0026#34;There is an issue\u0026#34;) Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_7_elif.py Nhấn Enter. Chúng ta cùng xem kết quả Làm tương tự như khi chúng ta kiểm tra khi hai giá trị SourceLanguageCode và TargetLanguageCode bằng nhau, chúng ta kiểm tra trường hợp sau và xem kết quả:\nThay đổi SourceLanguageCode và TargetLanguageCode thành các giá trị khác nhau nhưng không hợp lệ. Thay đổi SourceLanguageCode thành một giá trị không được hỗ trợ và TargetLanguageCode thành một giá trị được hỗ trợ. Thay đổi SourceLanguageCode thành một giá trị được hỗ trợ và TargetLanguageCode thành một giá trị không được hỗ trợ. Thay đổi cả hai biến SourceLanguageCode và TargetLanguageCode thành các giá trị được hỗ trợ nhưng khác nhau. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/6-functions/6.3-main-function/","title":"Hàm main()","tags":[],"description":"","content":"Hàm main() Trong phần 6.2, Chúng ta đã gọi hàm translate_text() bằng dòng translate_text(). Chúng ta có thể xem lại dưới đây\nimport boto3 client = boto3.client(\u0026#39;translate\u0026#39;) def translate_text(): response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, SourceLanguageCode=\u0026#39;en\u0026#39;, TargetLanguageCode=\u0026#39;fr\u0026#39; ) #### Add the new text below this line #### print(response) # this code is inside the function and will print the contents of the variable \u0026#39;response\u0026#39; translate_text() # This line will call our function. Without it, python will not do anything. Khi mã này được chạy, trình thông dịch sẽ xác định một biến đặc biệt gọi là __name__ và được gán giá trị của \u0026quot;__main__\u0026quot; trong code của file python này. Vì vậy, mã trong tệp python của chúng ta trở thành __name__ == \u0026ldquo;__main__\u0026rdquo;.\nWhen we use import statements, we can import code from other files into our python program. When this happens, the imported code is set a __name__ value of the modules name.\nBy setting the __name__==\u0026quot;__main__\u0026quot; we can control the order in which the code in this file is executed, telling python to run the code in this file which has the name of __main__ rather than the code imported from another file. This avoids situations where your code could run an imported script, resulting in unwanted behavior.\nWe do this using an if statement. If statements are covered in more detail later. At this stage, all you need to understand is that it is telling the python interpreter that if the __name__ is equal to __main__ which relates to the code in this python file, then run the main() function.\nThe main() function therefore sets the start point for our code to control the order in which our code executes. It is conventional to include all the calls to your functions within the main() function. This will help others to read your code and understand the logic and flow.\nChúng ta sẽ sử dụng hàm main() trong file python tiếp theo. Click + Click New File Trong phần code editor, thêm nội dung dưới đây: import boto3 client = boto3.client(\u0026#39;translate\u0026#39;) def translate_text(): response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, SourceLanguageCode=\u0026#39;en\u0026#39;, TargetLanguageCode=\u0026#39;fr\u0026#39; ) print(response) # this code is inside the function and will print the contents of the variable \u0026#39;response\u0026#39; def main(): translate_text() if __name__==\u0026#34;__main__\u0026#34;: main() 3. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập lab_3_main_function.py Click Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_3_main_function.py Nhấn Enter. Chúng ta cùng xem kết quả. Chủ đề này có thể gây nhầm lẫn. Nếu bạn đã cố gắng để hiểu những gì đang xảy ra ở đây, đừng lo lắng! Bạn sẽ thấy điều này được sử dụng trong suốt phần còn lại của bài lab này và bạn sẽ sớm bắt đầu nhận ra cách sử dụng nó.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/9-loop/9.3-list-comprehensions/","title":"Liệt kê danh sách","tags":[],"description":"","content":" Chúng ta sẽ tạo một danh sách chỉ gồm văn bản mà chúng tôi muốn dịch từ dữ liệu được cung cấp của file translate_input.json Mở file lab_6_loops.py Thêm hàm sau vào trong file lab_6_loops.py # Create a list of the input text def new_input_text_list(): input_text = open_input() new_list = [] for item in input_text: text = item[\u0026#39;Text\u0026#39;] new_list.append(text) print(new_list) Gọi hàm new_input_text_list() trong hàm main() giống như sau: def main(): new_input_text_list() translate_loop() Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_6_loops.py --file translate_input.json Nhấn Enter. Chúng ta cùng xem kết quả. Chúng ta sẽ thấy trả về một danh sách giống như:\n[\u0026#39;What is cloud computing?\u0026#39;, \u0026#39;Cloud computing is the on-demand delivery of IT resources over the Internet with pay-as-you-go pricing.\u0026#39;, \u0026#39;Instead of buying, owning, and maintaining physical data centers and servers, you can access technology services, such as computing power, storage, and databases, on an as-needed basis from a cloud provider like Amazon Web Services (AWS)\u0026#39;, \u0026#39;Who is using cloud computing?\u0026#39;, \u0026#39;Organizations of every type, size, and industry are using the cloud for a wide variety of use cases, such as data backup, disaster recovery, email, virtual desktops, software development and testing, big data analytics, and customer-facing web applications.\u0026#39;, \u0026#39;For example, healthcare companies are using the cloud to develop more personalized treatments for patients. Financial services companies are using the cloud to power real-time fraud detection and prevention.\u0026#39;, \u0026#39;And video game makers are using the cloud to deliver online games to millions of players around the world.\u0026#39;] List Comprehensions Chúng ta sẽ sử dụng kết hợp vòng lặp for và tạo danh sách thành một dòng. Mở file lab_6_loops.py Thêm hàm sau vào trong file lab_6_loops.py def new_list_comprehension(): input_text = open_input() list_comprehension = [item[\u0026#39;Text\u0026#39;] for item in input_text] print(list_comprehension) Gọi hàm new_list_comprehension() trong hàm main() giống như sau: def main(): new_input_text_list() translate_loop() new_list_comprehension() Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_6_loops.py --file translate_input.json Nhấn Enter. Chúng ta cùng xem kết quả. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/11-logging/11.3-add-logging-to-our-code/","title":"Thêm logging vào code","tags":[],"description":"","content":"Thêm logging vào code Tạo file lab_8_logging.py Trong Cloud9 IDE, click + Click New File Trong phần code editor, thêm nội dung dưới đây: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError # Add our input validation as a function here. def input_validation(item): languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: print(\u0026#34;There is an issue\u0026#34;) return False # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() 3. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_8_logging.py Click Save Thay đổi code để thêm logging giống như nội dung dưới đây: # Standard Imports import argparse import json # import logging import logging # 3rd Party Imports import boto3 # Set the logging file and default. The default is \u0026#39;Warning\u0026#39; logging.basicConfig(filename=\u0026#39;translate.log\u0026#39;,level=logging.DEBUG) # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError # Add our input validation as a function here. def input_validation(item): languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: logging.info(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) logging.debug(\u0026#34;The value of SourceLanguageCode is {}\u0026#34;.format(SourceLanguageCode)) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: logging.warning(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: logging.warning(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: logging.warning(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: logging.info(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: logging.warning(\u0026#34;There is an issue\u0026#34;) return False # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_8_logging.py --file translate_input.json Nhấn Enter. Mở file translate.log để xem tất cả các log "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/8-input/8.3-input-from-a-file/","title":"Truyền dữ liệu từ tệp tin","tags":[],"description":"","content":"Truyền dữ liệu từ tệp tin Hàm open là một hàm được xây dựng sẵn. Tài liệu cho thấy rằng có một chế độ tùy chọn có thể dùng để đọc dữ liệu chuyển vào hàm của chúng ta. Chúng ta có thể sử dụng r để mở tệp tin với chế độ chỉ đọc. Để viết chúng ta cần sử dụng w.\nĐể nhận đầu vào từ tệp bên ngoài, chúng tôi sử dụng:\nwith open(filename, \u0026#39;r\u0026#39; ) as variable_name: \u0026lt;Do something with the variable here\u0026gt; Tạo file lab_5_input_text_file.py Click + Click New File Trong phần code editor, thêm nội dung dưới đây: def open_input(file): with open(file, \u0026#39;r\u0026#39;) as f: text = f.read() #We use read() to read the actual contents of the file print(text) def main(): open_input(\u0026#34;text.txt\u0026#34;) if __name__==\u0026#34;__main__\u0026#34;: main() 3. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập lab_5_input_text_file.py Click Save Tạo file text.txt Click + Click New File Trong phần code editor, thêm nội dung dưới đây: \u0026#34;The Quick Brown Fox\u0026#34; 6. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập text.txt Click Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_5_input_text_file.py Nhấn Enter. Chúng ta sẽ thấy rằng nó trả về văn bản từ file text.txt Bây giờ chúng ta có thể đọc đầu vào từ một tệp.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/2-prepare/2.3-virtual-environment/","title":"Virtual Environments","tags":[],"description":"","content":"Virtual Environments Virtual Environment trong python là một vùng chứa chứa tất cả mã của chúng ta và các gói python khác. Nó cho phép chúng ta giữ cấu hình python của mình tách biệt với các phiên bản khác trên hệ thống của chúng ta. Chúng ta nên luôn sử dụng Virtual Environment khi phát triển mã python.\nChúng ta có thể chọn tên cho Virtual Environment như my_environment nhưng thông thường chúng ta sẽ thấy Virtual Environment được đặt là venv.\nĐể tạo Virtual Environment chúng ta sử dụng câu lệnh dưới đây: python -m venv my_venv Khi Virtual Environment được tạo, chúng ta cần phải kích hoạt nó. Sau khi được kích hoạt, code của bạn sẽ chạy bên trong Virtual Environment, bao gồm bất kỳ gói python nào chúng ta cài đặt.\nĐể kích hoạt Virtual Environment chúng ta sử dụng một trong những câu lệnh dưới đây tùy theo môi trường chúng ta sử dụng Với Linux/macOS, chạy câu lệnh dưới đây: source my_venv/bin/activate Với Windows (Git-Bash), chạy câu lệnh dưới đây: source my_venv/Scripts/activate Với Windows (PowerShell), chạy câu lệnh dưới đây: .\\my_venv\\Scripts\\Activate.ps1 Để biết bạn đang ở bên trong Virtual Environment, chúng ta sẽ thấy (my_venv) trước mỗi dòng trong phần Terminal.\nĐể thoát khỏi Virtual Environment, chúng ta nhập deactivate và nhấn Enter.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/3-variables/","title":"Biến","tags":[],"description":"","content":"Biến Biến (Variable) là một giá trị có thể thay đổi. Chúng có thể được sử dụng để lưu trữ thông tin có thể được tham chiếu và sử dụng bởi các chương trình. Thay vì sử dụng trực tiếp giá trị được lưu trữ, chúng ta có thể sử dụng biến để thay thế. Các biến có thể là một số thứ bất kỳ, chẳng hạn như một chuỗi văn bản, một danh sách hoặc một đối tượng. Sử dụng các biến làm cho code của chúng ta linh hoạt và có thể tái sử dụng. Nếu không có biến, chúng ta sẽ phải viết trực tiếp tất cả các giá trị vào (hardcode).\nTên biến được xác định khi bạn khai báo chúng. Quy ước cho tên biến được đặt ra trong pep8 (hướng dẫn kiểu tên biến cho python). Chúng nên là chữ thường với các từ được phân tách bằng dấu gạch dưới.\nCác biến trong python được khai báo ở định dạng name = value. Trong python, chúng ta có thể lưu trữ các loại dữ liệu khác nhau mà không cần phải rõ ràng về loại của biến khi chúng ta khai báo.\nDưới đây là một vài ví dụ:\na_str = \u0026#34;This is an example of a string in quotes\u0026#34; # In python the word string is abbreviated to str my_float = 5.5 an_integer = 5 # integer is abbreviated to int shopping_list = [\u0026#34;apples\u0026#34;, \u0026#34;oranges\u0026#34;, \u0026#34;pears\u0026#34;] a_dict = {\u0026#34;userId\u0026#34;: \u0026#34;JBloggs\u0026#34;} # dictionary is abbreviated to dict my_var = another_variable # variable is abbreviated to var test_function = my_function() #function is abbreviated to func example_tuple = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pear\u0026#34;) boolean_values = True # boolean is abbreviated to bool "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/4-data-types/","title":"Các loại dữ liệu","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta xem xét các kiểu dữ liệu trong Python.\nNội dung: Chuỗi Kiểu số Dictionaries Lists Xác định kiểu của dữ liệu "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/8-input/8.4-json/","title":"JSON","tags":[],"description":"","content":"JSON JSON viết tắt cho Javascript Object Notation. Nó có cấu trúc rất giống với từ điển và danh sách python. Đây là một định dạng rất phổ biến cho các chương trình máy tính để trao đổi thông tin trong việc sử dụng API.\nChúng ta có thể chuyển đổi Python sang JSON theo bảng dưới đây:\nPython JSON dict object list,tuple array str string int, float number True true False false None null Chúng ta cần sử dụng gói json để thực hiện chuyển đổi. Gói json là một gói python được cài đặt sẵn nên không cần cài đặt bằng pip.\njson.loads() \u0026amp; json.dumps() Trước khi sử dụng tệp bên ngoài, chúng ta nên dành thời gian tìm hiểu về json.loads() và json.dumps(). Chúng ta có thể nhầm lẫn giữa json.loads() và json.load() hoặc json.dumps() và json.dump().\nChúng ta có thể phân biệt như sau:\njson.load() \u0026amp; json.dump() - Sử dụng để nhập và xuất JSON từ tệp và vào tệp. json.loads() \u0026amp; json.dumps() - Sử dụng để nhập và xuất JSON từ chuỗi và thành chuỗi. Tạo file lab_5_json_input.py Click + Click New File Trong phần code editor, thêm nội dung dưới đây: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34;, \u0026#34;Required\u0026#34;: true } ] } \u0026#34;\u0026#34;\u0026#34; def main(): json_input = json.loads(json_string) print(json_input) if __name__==\u0026#34;__main__\u0026#34;: main() 3. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập lab_5_json_input.py Click Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_5_json_input.py Nhấn Enter. Chúng ta cùng xem kết quả. Các tham số giống như là đầu vào của chúng ta cho dịch vụ Amazon Translate và thêm vào đó một tham số khác là \u0026ldquo;Required\u0026rdquo;: true nhưng chỉ để minh họa.\n5. Chúng ta có thể sử dụng json.dumps() với tham số indent để có được định dạng với thụt lề dễ đọc:\nThay đổi file lab_5_json_input.py giống như nội dung dưới đây: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34;, \u0026#34;Required\u0026#34;: true } ] } \u0026#34;\u0026#34;\u0026#34; def main(): json_input = json.loads(json_string) indented_format = json.dumps(json_input, indent=2) print(indented_format) if __name__==\u0026#34;__main__\u0026#34;: main() Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_5_json_input.py Nhấn Enter. Chúng ta cùng xem kết quả. Chúng ta đã thêm định dạng indent = 2 để JSON dễ đọc hơn. Điều hướng cấu trúc JSON Học cách điều hướng cấu trúc JSON để sử dụng thông tin chúng ta cần có lẽ là một trong những bài học cơ bản nhất chúng ta sẽ học được khi sử dụng python với AWS.\nThay đổi file lab_5_json_input.py giống như nội dung dưới đây: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34;, \u0026#34;Required\u0026#34;: true } ] } \u0026#34;\u0026#34;\u0026#34; # Modify below this line def main(): json_input = json.loads(json_string) text = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;Text\u0026#39;] source_language_code = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] target_language_code = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] print(text, source_language_code, target_language_code) if __name__==\u0026#34;__main__\u0026#34;: main() Chúng ta sẽ thấy cách điều hướng cấu trúc JSON:\nĐầu tiên, vì JSON nằm trong biến json_input chúng ta sử dụng biến này để bắt đầu.\nTiếp theo, khóa từ điển đầu tiên là \u0026ldquo;Input\u0026rdquo; vì vậy cái này được đặt trong dấu []: [\u0026lsquo;Input\u0026rsquo;].\nTiếp theo, trong cấu trúc của chúng ta là một danh sách. Một danh sách sử dụng một chỉ mục và chỉ mục bắt đầu từ 0 cho phần tử đầu tiên. Vì vậy, để có được phần tử đầu tiên, chúng ta sử dụng [0].\nTiếp theo, chúng ta muốn nhận các giá trị cho các khóa \u0026ldquo;Text\u0026rdquo;,\u0026ldquo;SourceLanguageCode\u0026rdquo; và \u0026ldquo;TargetLanguageCode\u0026rdquo; trong từ điển.\nLưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_5_json_input.py Nhấn Enter. Chúng ta cùng xem kết quả. json.load() \u0026amp; json.dump() Chúng ta tạo file translate_input.json với một số dữ liệu JSON mà chúng ta sẽ sử dụng cho dịch vụ Amazon Translate. Click + Click New File Trong phần code editor, thêm nội dung dưới đây: { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } 11. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập translate_input.json Click Save Mở file lab_5_json_input.py Thay đổi file lab_5_json_input.py giống như nội dung dưới đây: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True) args = parser.parse_args() # Functions def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;][0] def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) # Main Function - use to call other functions def main(): kwargs = open_input() translate_text(**kwargs) if __name__ == \u0026#34;__main__\u0026#34;: main() Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_5_json_input.py --file translate_input.json Nhấn Enter. Chúng ta cùng xem kết quả. Chúng ta đã sử dụng json.loads() và json.dumps() để thao tác các chuỗi JSON.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/4-data-types/4.4-lists/","title":"List","tags":[],"description":"","content":"List List là danh sách được sử dụng để lưu trữ các giá trị có thứ tự. Ví dụ như: [0, 1, 2, 3, 4] hoặc [\u0026ldquo;apples\u0026rdquo;, \u0026ldquo;oranges\u0026rdquo;, \u0026ldquo;bananas\u0026rdquo;]\nMột list có thể chứa các kiểu dữ liệu khác(Ví dụ như: dictionary,string,\u0026hellip;). Ví dụ: [{\u0026ldquo;fruit_type\u0026rdquo; : \u0026ldquo;apples\u0026rdquo;}, {\u0026ldquo;number\u0026rdquo; : 50}]\nTạo list List có thể được tạo bằng cách gán các giá trị chúng ta muốn lưu trữ trong danh sách cho một biến Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode fruit = [\u0026#34;apples\u0026#34;,\u0026#34;oranges\u0026#34;,\u0026#34;bananas\u0026#34;] print(fruit) Nhấn Enter. Cùng xem kết quả. Chúng ta có thể tạo list rỗng bằng 2 cách sau Gán [] cho một biến. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode first_empty_list = [] print(first_empty_list) Nhấn Enter. Cùng xem kết quả. Sử dụng hàm khởi tạo list(). Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode second_empty_list = list() print(second_empty_list) Nhấn Enter. Cùng xem kết quả. Đọc list Các đối tượng được lưu trữ trong list được cung cấp số chỉ mục bắt đầu từ 0. Để lấy ra một phần tử từ danh sách, chúng ta sử dụng số chỉ mục của giá trị được lưu trữ.\nNhập hoặc sao chép nội dung dưới đây vào Interactive Mode fruit = [\u0026#34;apples\u0026#34;,\u0026#34;oranges\u0026#34;,\u0026#34;bananas\u0026#34;] print(fruit[1]) Nhấn Enter. Cùng xem kết quả. Trong ví dụ trên, chúng ta đã lấy ra giá trị được lưu trữ trong chỉ mục 1 là oranges bởi vì trong list vị trí chỉ mục đầu tiên bắt đầu từ 0.\nĐể lấy ra độ dài của list chúng ta sử dụng hàm len() Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode len(fruit) Nhấn Enter. Cùng xem kết quả. Chúng ta có thể lấy giá trị ngược từ cuối list lên bằng cách sử dụng giá trị chỉ mục âm. Ví dụ chúng ta có thể lấy giá trị cuối cúng bằng cách sử dụng chỉ mục có giá trị là -1. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode print(fruit[-1]) print(fruit[-2]) Nhấn Enter. Cùng xem kết quả. Cập nhật list Lists có thể thay đổi sau khi chúng ta tạo. Chúng ta có thể thêm, cập nhật, xóa và sắp xếp lại thứ tự các phần tử trong list.\nChúng ta có thể sử dụng hàm append() để thêm phần tử vào cuối của list. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode fruit.append(\u0026#34;kiwi\u0026#34;) print(fruit) Nhấn Enter. Cùng xem kết quả. Chúng ta đã thêm một phần tử vào cuối của danh sách fruit Nếu chúng ta muốn thêm một phần tử tại một điểm cụ thể trong list, chúng ta có thể sử dụng method insert(). Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode fruit.insert(2, \u0026#34;passion fruit\u0026#34;) print(fruit) Nhấn Enter. Cùng xem kết quả. Tổ chức 1 danh sách Các phần tử trong danh sách không được sắp xếp tự động nhưng chúng ta có thể sắp xếp chúng.\nNếu chúng ta muốn sắp xếp những phần tử trong list chúng ta có thể sử dụng hàm sorted(). Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode print(sorted(fruit)) print(fruit) Nhấn Enter. Cùng xem kết quả. Trong ví dụ trên, bạn có thể thấy rằng hàm sorted() trả về một danh sách đã được sắp xếp, nhưng không thay đổi thứ tự ban đầu của danh sách.\nNếu chúng ta muốn sắp xếp một list vĩnh viễn, chúng ta có thể sử dụng method sort() Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode fruit.sort() print(fruit) Nhấn Enter. Cùng xem kết quả. Để đảo ngược thứ tự những phần tử trong list, chúng ta có thể sử dụng method reverse(). Sau khi sử dụng method reverse(), list sẽ được thay đổi vĩnh viễn. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode fruit.reverse() print(fruit) Nhấn Enter. Cùng xem kết quả. Xóa phần tử trong list Chúng ta có thể xóa phần tử trong list sử dụng câu lệnh del nếu chúng ta biết vị trí chỉ mục của phần tử Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode del fruit[1] print(fruit) Nhấn Enter. Cùng xem kết quả. Nếu chúng ta muốn sử dụng giá trị sau khi xóa nó khỏi danh sách, bạn sử dụng method pop(). Để sử dụng pop(), chúng ta cần lưu trữ giá trị chúng ta đã xóa khỏi list bên trong một biến khác. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode favorite_fruit = fruit.pop() print(favorite_fruit) Nhấn Enter. Cùng xem kết quả. pop() mặc định trả về phần tử cuối cùng của list. Chúng ta có thể trả về bất cứ phần tử nào bằng cách sử dụng vị trí chỉ mục của phần tử. Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode fresh_fruit = fruit.pop(1) print(fresh_fruit) Nhấn Enter. Cùng xem kết quả. Nếu chúng ta không biết vị trí chỉ mục của phần tử chúng ta có thể sử dụng method remove() để chỉ định giá trị của phần tử chúng ta muốn xóa Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode fruit.remove(\u0026#39;bananas\u0026#39;) print(fruit) Nhấn Enter. Cùng xem kết quả. Khi chúng ta sử dụng del, pop() or remove(), phần tử sẽ bị xóa vĩnh viễn khỏi list ban đầu. Nếu list được in ra, chúng ta sẽ thấy rằng các phần tử đó không còn được lưu trữ trong list.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/10-if-statements/10.4-add-input-validation/","title":"Thêm xác thực đầu vào","tags":[],"description":"","content":"Thêm xác thực đầu vào Chúng ta sẽ thêm xác thực đầu vào dưới dạng một hàm, mỗi câu lệnh if-elif-else sẽ trả về giá trị True hoặc False. Chúng ta sẽ thêm một lệnh gọi hàm xác thực đầu vào vào vòng lặp for trong hàm translate_loop().\nTạo file lab_7_input_validation.py Trong Cloud9 IDE, click + Click New File Trong phần code editor, thêm nội dung dưới đây: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError # Add our input validation as a function here. def input_validation(item): languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: print(\u0026#34;There is an issue\u0026#34;) return False # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() 3. Nhấn tổ hợp phím Ctrl + s\nTại mục Filename, nhập lab_7_input_validation.py Click Save Để chạy chương trình, nhập câu lệnh dưới đây vào terminal: python lab_7_input_validation.py --file translate_input.json Nhấn Enter. Chúng ta cùng xem kết quả "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/5-packages/","title":"Python Packages","tags":[],"description":"","content":"Python Packages Python package là mã bao gồm các thành phần riêng lẻ được gọi là mô-đun mà chúng ta có thể sử dụng trong mã của mình. Các gói giúp chúng ta không phải viết mọi thứ của chương trình từ đầu bằng cách cho phép chúng ta sử dụng mã của những người khác. Bằng cách nhập các gói(package) vào chương trình của chúng ta, chúng ta có thể sử dụng các tính năng của gói đó. Python có các gói(package) phổ biến có sẵn, những gói(package) khác phải được cài đặt vào môi trường ảo của chúng ta bằng trình quản lý gói(package) python pip.\nĐể làm việc với AWS, bạn sẽ cần cài đặt gói(package) Boto3\nTrong terminal nhập: pip install boto3 Nếu bạn nhận được thông báo lỗi. Kiểm tra xem bạn đã thoát khỏi môi trường Interactive Mode nếu chưa hãy sử dụng crtl + d hoặc nhập exit() và nhấn Enter để thoát khỏi môi trường Interactive Mode.\nChúng ta có thể xem những gói(package) nào chúng ta đã cài đặt nhập nội dung dưới đây vào terminal: pip freeze Cùng xem kết quả. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/4-data-types/4.5-determining-type/","title":"Xác định kiểu của dữ liệu","tags":[],"description":"","content":"Xác định kiểu của dữ liệu Đôi khi mã của chúng ta sẽ xuất hiện lỗi TypeError. Những điều này có thể gây khó chịu khi sửa chữa. Bước đầu tiên thường là tìm kiểu của dữ liệu đó trong Python.\nTrong Python, cách để tìm ra kiểu của dữ liệu đã lưu trữ trong một biến là sử dụng method type().\nNhập hoặc sao chép nội dung dưới đây vào Interactive Mode my_variable = \u0026#34;A string\u0026#34; print(type(my_variable)) Nhấn Enter. Cùng xem kết quả. Khi bạn biết kiểu của dữ liệu, bạn có thể sửa lỗi TypeError.\nNhập hoặc sao chép nội dung dưới đây vào Interactive Mode my_number = 50 some_string = \u0026#34;The number is \u0026#34; print(some_string + my_number) Nhấn Enter. Cùng xem kết quả. Chúng ta sẽ thấy lỗi TypeError Chúng ta có thể sửa lỗi TypeError bằng cách chuyển my_number thành một chuỗi Nhập hoặc sao chép nội dung dưới đây vào Interactive Mode my_number = 50 some_string = \u0026#34;The number is \u0026#34; print(some_string + str(my_number)) Nhấn Enter. Cùng xem kết quả. Lỗi TypeError đã được sửa. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/6-functions/","title":"Hàm","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ bắt đầu với một hàm đơn giản và sau đó viết một hàm sử dụng dịch vụ Amazon Translate.\nNội dung: Hàm đơn giản Boto3 Hàm main() "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/7-arguments-and-parameters/","title":"Tham số và đối số","tags":[],"description":"","content":"Tham số là biến được định nghĩa khi khai báo hàm. Khi một hàm được gọi, các đối số là dữ liệu bạn truyền vào các tham số của hàm.\nPositional Arguments Positional argument là đối số được truyền vào phụ thuộc vào thứ tự trong dấu ()\nTạo file lab_4_positional_arguments.py Click + Click New File Trong phần code editor, thêm nội dung dưới đây: import boto3 def translate_text(): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, SourceLanguageCode=\u0026#39;en\u0026#39;, TargetLanguageCode=\u0026#39;fr\u0026#39; ) print(response) def main(): translate_text() if __name__==\u0026#34;__main__\u0026#34;: main() 3. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập lab_4_positional_arguments.py Click Save Sửa đổi hàm để chúng ta có một số positional argument vị trí và lưu lại: import boto3 def translate_text(text, source_language_code, target_language_code): # we define the positional arguments in the () client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text( Text=text, # we remove the hard coded value SourceLanguageCode=source_language_code, # we used the positional argument instead TargetLanguageCode=target_language_code ) print(response) def main(): translate_text(\u0026#39;I am learning to code in AWS\u0026#39;,\u0026#39;en\u0026#39;,\u0026#39;fr\u0026#39;) # we provide the value for the arguments when we call the function in the correct positional order. if __name__==\u0026#34;__main__\u0026#34;: main() Giá trị \u0026lsquo;I am learning to code in AWS\u0026rsquo;, \u0026rsquo;en\u0026rsquo; và \u0026lsquo;fr\u0026rsquo; là những positional argument được truyền vào các tham số(parameters): text, source_language_code và target_language_code.\nĐể chạy chương trình, nhập câu lệnh dưới đây vào terminal python lab_4_positional_arguments.py Nhấn Enter. Chúng ta cùng xem kết quả. Keyword Arguments Một keyword argument là một cặp name-value được truyền cho hàm. Dưới đây là một số ưu điểm:\nNếu các giá trị được truyền với các đối số vị trí sai, chúng ta sẽ gặp lỗi hoặc chương trình của chúng ta sẽ chạy không đúng. Các đối số từ khóa có thể được chuyển theo bất kỳ thứ tự nào. Khi sử dụng ** chúng ta có thể chuyển một số đối số từ khóa tùy ý. Chúng ta có thể giảm số dòng trong mã của mình. Tạo file lab_4_keyword_arguments.py Click + Click New File Trong phần code editor, thêm nội dung dưới đây: import boto3 def translate_text(text, source_language_code, target_language_code): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text( Text=text, SourceLanguageCode=source_language_code, TargetLanguageCode=target_language_code ) print(response) def main(): translate_text(\u0026#39;I am learning to code in AWS\u0026#39;,\u0026#39;en\u0026#39;,\u0026#39;fr\u0026#39;) if __name__==\u0026#34;__main__\u0026#34;: main() 7. Nhấn tổ hợp phím Ctrl + s.\nTại mục Filename, nhập lab_4_keyword_arguments.py Click Save Thay đổi file lab_4_keyword_arguments.py giống như nội dung dưới đây: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) def main(): translate_text(Text=\u0026#39;I am learning to code in AWS\u0026#39;,SourceLanguageCode=\u0026#39;en\u0026#39;,TargetLanguageCode=\u0026#39;fr\u0026#39;) if __name__==\u0026#34;__main__\u0026#34;: main() Chúng ta đã thay thế các đối số vị trí bằng các đối số từ khóa. Điều này được thực hiện bằng cách sử dụng **kwargs.\nChúng ta đã xóa tất cả các thông số như Text=text rút ngắn mã của chúng ta và thay thế nó bằng response = client.translate_text(**kwargs).\nChúng ta đã xác định các keyword argument khi chúng ta truyền vào khi gọi hàm bằng cú pháp Text=\u0026lsquo;I am learning to code in AWS\u0026rsquo;.\nLưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal python lab_4_keyword_arguments.py Nhấn Enter. Chúng ta cùng xem kết quả. Chúng ta sẽ thay đổi vị trí thứ tự của các keyword argument để xem có bất kỳ thay đổi nào không. Thay đổi file lab_4_keyword_arguments.py giống như nội dung dưới đây: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) def main(): translate_text(SourceLanguageCode=\u0026#39;en\u0026#39;,Text=\u0026#39;I am learning to code in AWS\u0026#39;,TargetLanguageCode=\u0026#39;fr\u0026#39;) if __name__==\u0026#34;__main__\u0026#34;: main() Lưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal python lab_4_keyword_arguments.py Nhấn Enter. Chúng ta cùng xem kết quả. Chúng ta sẽ thấy kết quả không có bất kỳ thay đổi nào. Chúng ta sẽ thấy các keyword argument không phụ thuộc vào thứ tự trong dấu (). Chúng tôi sẽ sử dụng dictionary làm keyword argument Thay đổi file lab_4_keyword_arguments.py giống như nội dung dưới đây: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) ### Change below this line only ### kwargs={ \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } def main(): translate_text(**kwargs) if __name__==\u0026#34;__main__\u0026#34;: main() Chúng ta đã xác định một biến có tên là kwargs là từ dictionary chứa các cặp key\\:value.\nChúng ta đã thay thế các keyword argument khi chúng ta truyền **kwargs vào khi gọi hàm. The ** nói rằng đó là một đối số mà chúng ta có thể truyền số keyword argument tùy ý, kwargs là tên mà chúng ta tự định nghĩa. Chúng tôi đặt mỗi cặp key\\:value trên một dòng riêng biệt để dễ đọc.\nLưu lại Để chạy chương trình, nhập câu lệnh dưới đây vào terminal python lab_4_keyword_arguments.py Nhấn Enter. Chúng ta cùng xem kết quả. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/8-input/","title":"Đầu vào","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ tìm hiểu các cách khác nhau để chuyển thông tin đến chương trình của mình dưới dạng đầu vào từ các nguồn bên ngoài.\nNội dung: Nhập dữ liệu từ console CLI Arguments Truyền dữ liệu từ tệp tin JSON "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/9-loop/","title":"Vòng lặp","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ tìm hiểu những điều cơ bản về cách sử dụng vòng lặp và sau đó mở rộng ví dụ của chúng ta về việc sử dụng Amazon Translate.\nNội dung: Vòng lặp đơn giản Vòng lặp với JSON Liệt kê danh sách "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/10-if-statements/","title":"Câu lệnh if","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ giới thiệu về:\nCâu lệnh if. Câu lệnh Else. Câu lệnh Elif. Nội dung: Câu lệnh If - Else Kiểm tra giá trị trong danh sách Elif Thêm xác thực đầu vào "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/11-logging/","title":"Logging","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ sử dụng một hàm trong python để ghi nhật ký.\nNội dung: Ghi log đơn giản Log Level và Log File Thêm logging vào code "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/12-errors-and-exceptions/","title":"Lỗi và ngoại lệ","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ xem xét việc sử dụng các khối try-exception để quản lý các ngoại lệ của chúng ta. Chúng ta sẽ bắt đầu với một ví dụ đơn giản trước khi thêm vào mã của chúng ta cho Amazon Translate.\nNội dung: Ví dụ đơn giản Thêm Error Handling vào Code "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/13-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Xóa môi trường AWS Cloud9 Truy cập AWS Cloud9 console. Click Account environments. Select LearnPython Click Delete Nhập Delete để xác nhận, sau đó click Delete để xóa "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]