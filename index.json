[{"uri":"https://hotloncon1.github.io/learn-python-on-aws/","title":"Learn Python On AWS","tags":[],"description":"","content":"Learn Python On AWS Oveview This workshop will teach you the basics of the python programming language using Amazon Web Services (AWS).\nIt is aimed at beginners who have never programmed in python and it uses similar methods of explaining the basics as other books and tutorials on the python programming language.\nIt differs in that all the examples aim to get you started building on AWS rather than learning how to build a game, website, manipulate or visualize data.\nContent: Introduction Preparation Variables Data Types Python Packages Functions Arguments and Parameters Inputs Loops If Statements Logging Errors and Exceptions Clean up resources "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/12-errors-and-exceptions/12.1-simple-example/","title":"A simple example","tags":[],"description":"","content":"A simple example In python, we handle exceptions using a block called a try-except which wraps around our code. Python uses the try statement to attempt to run the code and uses the except statement if the code returns some sort of error.\nThe python documentation provides details on how to implement this. As before we will start with a simple example to illustrate how this works.\nCreate a new file called lab_9_errors.py In the Cloud9 IDE, click on the + Click New File to create a new file In the editor add the following: integer = 50 string = \u0026#34;The number is\u0026#34; print(string + integer) 3. Press Ctrl + s shortcuts\nIn the Filename section, type lab_9_errors.py Click Save To run the program, enter the following command in the terminal: python lab_9_errors.py Press Enter. See the result The code returns a TypeError because you cannot add a string value to an integer without first telling python to convert the integer into a string using str()\nWe will add the try-except block. Modify lab_9_errors.py as follows: import logging integer = 50 string = \u0026#34;The number is\u0026#34; try: print(string + integer) except TypeError as err: logging.warning(\u0026#34;Error - {}. You cannot add a string to an integer, without converting the integer to a string first\u0026#34;.format(err)) Save To run the program, enter the following command in the terminal: python lab_9_errors.py Press Enter. See the result Adding Multiple Except Statements The except statement above will only work for a TypeError because we have specified this in the except statement.\nThere can be multiple except statements which provide details on what to do in the event of different types of error.\nHere is an example:\nimport logging integer = 50 string = \u0026#34;The number is\u0026#34; try: print(string + integer) except TypeError as t_err: logging.warning(\u0026#34;Error - {}. You cannot add a string to an integer, without converting the integer to a string first\u0026#34;.format(t_err)) except ValueError as v_err: logging.warning(\u0026#34;Error - {}. Your message\u0026#34;.format(v_err)) Exceptions generated by AWS Boto3 We want to be able to see exceptions generated by the AWS services we are calling. These are returned by Boto3 using botocore. We need to add an import statement into our code and then we can use the try-except statement. An example is shown below:\nimport logging import boto3 from botocore.exceptions import ClientError try: client = boto3.client(\u0026#39;translate\u0026#39;) except ClientError as e: logging.warning(\u0026#34;\u0026lt;your msg\u0026gt; {}\u0026#34;.format(e)) "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/2-prepare/2.1-create-cloud9/","title":"Create Cloud9","tags":[],"description":"","content":"Create Cloud9 AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run and debug your code with just a browser. It comes prepackaged with essential tools including python.\nGo to Amazon Cloud9 Console. Click Create environment. In the Name section, type LearnPython Click Next step Click Next step Click Create environment AWS Cloud9 environment was created "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/1-introduction/","title":"Introduction","tags":[],"description":"","content":"Introduction This workshop will teach you the basics of the python programming language using Amazon Web Services (AWS).\nIt is aimed at beginners who have never programmed in python and it uses similar methods of explaining the basics as other books and tutorials on the python programming language.\nIt differs in that all the examples aim to get you started building on AWS rather than learning how to build a game, website, manipulate or visualize data.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/6-functions/6.1-simple-function/","title":"Simple Function","tags":[],"description":"","content":"Simple Function In python we can declare a function using the syntax: def function_name():\nA function begins with def, has a name in lower case, with words separated by underscores to improve readability, a set of () which contain parameters (more on this later) and ends in :.\nCreate A Simple Function In the top section of the Cloud9 IDE. Click on the + Click New File to create a new file In the editor add the following: # A function that prints hello world def hello_world(): print(\u0026#39;hello world\u0026#39;) # This line calls (runs) the function hello_world() 3. Press Ctrl + s shortcuts\nIn the Filename section, type lab_1_hello_world.py The py on the end denotes that it is a python file.\nClick Save To run the program, enter the following command in the terminal: python lab_1_hello_world.py Press Enter Returning information from a function When a function performs some kind of activity, by default the information it remains contained within the boundary of the function. To pass the information to other parts of your code, you need to use return. The value the function returns is called the return value and it is passed back to the line which called the function.\nModify lab_1_hello_world.py as follows: # A function that returns hello world def hello_world(): return \u0026#39;hello world\u0026#39; # Assign the hello_world() function to a variable. greeting = hello_world() print(greeting) Save. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/11-logging/11.1-simple-logging/","title":"Simple Logging","tags":[],"description":"","content":"Simple Logging We will replace the print() statements, that send output to the console with logging, which sends the output to logs. Using logging allows us to return information about how the program is functioning. Using methods like print() allow us to return information to the user.\nCreate a new file called lab_8_simple_logging.py In the Cloud9 IDE, click on the + Click New File to create a new file In the editor add the following: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) else: print(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) 3. Press Ctrl + s shortcuts\nIn the Filename section, type lab_8_simple_logging.py Click Save We have used print() to output the messages to the console. This is where we need to make changes to the code to add them to logs rather than output to the console. Modify lab_8_simple_logging.py as follows: # Import logging import logging import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: logging.warning(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) # This will print to the console as the default level is warning else: logging.info(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) # This will not print to the console because it is lower than warning Save To run the program, enter the following command in the terminal: python lab_8_simple_logging.py --file translate_input.json Press Enter. See the result This should return nothing to the console. This is because by default the logging level is set to logging.warning. Because the code is correct, it does not generate a warning.\nModify lab_8_simple_logging.py as follows: # Import logging import logging import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;en\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: logging.warning(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) # This will print to the console as the default level is warning else: logging.info(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) # This will not print to the console because it is lower than warning Save To run the program, enter the following command in the terminal: python lab_8_simple_logging.py --file translate_input.json Press Enter. See the result. We will see the WARNING log. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/9-loop/9.1-simple-loop/","title":"Simple Loops","tags":[],"description":"","content":"Simple Loops we will create a simple example in the python interactive environment to show how looping over a list works.\nCreate a list and assign it to a variable: Type or copy the following into the python interactive mode fruit = [\u0026#39;apples\u0026#39;,\u0026#39;oranges\u0026#39;,\u0026#39;bananas\u0026#39;] Press Enter Create a for loop and print out the items in the list one by one Type or copy the following into the python interactive mode for item in fruit: print(f\u0026#39;The best fruit now is {item}\u0026#39;) Double pressing Enter. We will see the result If you want to want to use a loop as a counter, you could create a list of numbers and assign it to a variable Type or copy the following into the python interactive mode numbers = [0,1,2,3,4,5,6,7,8,9,10] Press Enter Type or copy the following into the python interactive mode for number in numbers: print(f\u0026#39;The next number is {number}\u0026#39;) This example print all the numbers from 0 to 10\nDouble pressing Enter. We will see the result Previous example print all the numbers from 0 to 10, but what if you wanted to count to 1000. It would be tedious to write all the numbers out in this way.Instead we use the range() function. Type or copy the following into the python interactive mode for number in range(10): print(f\u0026#39;The next number is {number}\u0026#39;) Double pressing Enter. We will see the result We can see that computers start counting at 0 as the first number, If we want to start counting at 1, we can still use the range() method. Type or copy the following into the python interactive mode for number in range(1,10): print(f\u0026#39;The next number is {number}\u0026#39;) Double pressing Enter. We will see the result If we want to increment the counter by more than the default value of 1, perhaps if we wanted only odd numbers or even numbers for example. To do this you add a third parameter to the range() function Type or copy the following into the python interactive mode for number in range(1,10,2): print(f\u0026#39;The next number is {number}\u0026#39;) The range(start, stop, step) function includes:\nstart parameter: Optional. An integer number specifying at which position to start. Default is 0.\nstop parameter: Required. An integer number specifying at which position to stop (not included).\nstep parameter: Optional. An integer number specifying the incrementation. Default is 1\nDouble pressing Enter. We will see the result "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/4-data-types/4.1-string/","title":"Strings","tags":[],"description":"","content":"Strings In python a string, is shortened to str and refers to anything inside quotes. The quotes can be double or single. The examples below are identical to python.\n\u0026#34;The quick brown fox jumped over the lazy dog\u0026#34; \u0026#39;The quick brown fox jumped over the lazy dog\u0026#39; If you want to include a direct quote in your sentence, then use single quotes for the string and double quotes for the direct quote or other ways. For example:\n\u0026#39;The error message was \u0026#34;Incorrect DataType\u0026#34;\u0026#39; \u0026#34;The error message was \\\u0026#34;Incorrect DataType\\\u0026#34;\u0026#34; \u0026#39;The error message was \\\u0026#39;Incorrect DataType\\\u0026#39;\u0026#39; \u0026#34;The error message was \u0026#39;Incorrect DataType\u0026#39;\u0026#34; This allows you the flexibility to use single quotes to wrap the string and double quotes inside the string for a direct quote, without python getting confused.\nIn the terminal, type python and press Enter to onpen the Interactive Mode Strings, like all data types, can be assigned to a variable. Type or copy the following into the python interactive mode first_name = \u0026#34;Monty\u0026#34; last_name = \u0026#34;Python\u0026#34; Press Enter We have just created a python variable called first_name and given it a value \u0026ldquo;Monty\u0026rdquo;.\nWe have just created another python variable called last_name and given it a value \u0026ldquo;Python\u0026rdquo;.\nWe can print the value of these variables using print function. Type or copy the following into the python interactive mode print(first_name) print(last_name) Press Enter. We will see the result. You can add strings together using variables. This concatenates them. Type or copy the following into the python interactive mode print(first_name + last_name) Press Enter. We will see the result. You can see that there isn\u0026rsquo;t a space in MontyPython. To include a space, you need to either add it to the beginning or end of your word or add it as a separate string. Type or copy the following into the python interactive mode print(first_name + \u0026#34; \u0026#34; + last_name) Press Enter. We will see the result. Using Variables in Strings Imagine we want to use the value of a variable in the middle of a string. This can be done a few ways in python.\nUse .format() to use the value of a variable in the middle of a string In this method you can use the {} in your string to indicate where the variable should go. Then use .format(variable_name) after the quotation marks. If you have multiple variables, for each variable you use a {}. In the .format() separate each variable with a comma. For example .format(variable_1, variable_2).\nType or copy the following into the python interactive mode first_name = \u0026#34;John\u0026#34; surname = \u0026#34;Doe\u0026#34; print(\u0026#34;My first name is {}. My family name is {}\u0026#34;.format(first_name, surname)) Press Enter. We will see the result. Use f strings to use the value of a variable in the middle of a string Since python version 3.6 it has been possible to use a format called f-strings to include variables in your strings. Some people find this format easier to read.\nType or copy the following into the python interactive mode print(f\u0026#34;My first name is {first_name}. My family name is {surname}\u0026#34;) Press Enter. We will see the result. There are more actions we can perform on strings, but we have enough information to start using python with AWS. You can either continue to learn more, or move on to Integers.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/10-if-statements/10.1-if-else-statement/","title":"The If - Else Statement","tags":[],"description":"","content":"We will add some conditional tests, using the if statement. We will perform some input validation to make sure that the parameters provided are valid values that Amazon Translate will accept.\nEquivalence Sometimes we want to check if two values are equal. We cannot use the = as this is reserved for declaring a variable. To check if two values are equivalent you need to use the == sign.\nWhere two values are equal this will return a True and where they are not equal it will return False\nWe will test the == sign: Type or copy the following into the python interactive mode SourceLanguageCode = \u0026#34;en\u0026#34; TargetLanguageCode = \u0026#34;fr\u0026#34; SourceLanguageCode == TargetLanguageCode Press Enter. \u0026ldquo;en\u0026rdquo; differs with \u0026ldquo;fr\u0026rdquo; so SourceLanguageCode == TargetLanguageCode will return False Type or copy the following into the python interactive mode SourceLanguageCode = \u0026#34;fr\u0026#34; TargetLanguageCode = \u0026#34;fr\u0026#34; SourceLanguageCode == TargetLanguageCode Press Enter. \u0026ldquo;fr\u0026rdquo; and \u0026ldquo;fr\u0026rdquo; are equivalent so SourceLanguageCode == TargetLanguageCode will return True We can use ctrl + d or exit() to exit from the interactive python session.\nWe will the if statement to prevent an error where you try to translate from \u0026ldquo;en\u0026rdquo; to \u0026ldquo;en\u0026rdquo;. In the Cloud9 IDE, click on the + Click New File to create a new file In the editor add the following: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # We use loads as we are loading from a string. # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) else: print(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) 5. Press Ctrl + s shortcuts\nIn the Filename section, type lab_7_equivalence.py Click Save To exit from the interactive python session, we type or copy exit() the python interactive mode Press Enter To run the program, enter the following command in the terminal: python lab_7_equivalence.py Press Enter Modify lab_7_equivalence.py as follows: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;fr\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # We use loads as we are loading from a string. # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) else: print(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) Save. To run the program, enter the following command in the terminal: python lab_7_equivalence.py Press Enter. We will see the if statement to prevent an error where you try to translate from \u0026ldquo;fr\u0026rdquo; to \u0026ldquo;fr\u0026rdquo; Operators When using if statements you will often be using different operators to determine equivalence. Here are some of the operators that python supports\nPython Meaning == is equivalent to != is not equivalent to \u0026gt; is greater than \u0026lt; is less than \u0026gt;= is equal to or greater than \u0026lt;= is equal to or less than "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/8-input/8.1-user-input-from-the-console/","title":"User input from the console","tags":[],"description":"","content":"User input from the console In this section, we learn how to provide user input when the program is run and pass this to the function.\nCreate a new file called lab_5_console_input.py Click on the + Click New File to create a new file In the editor add the following: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) ### Change below this line only ### kwargs={ \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } def main(): translate_text(**kwargs) if __name__==\u0026#34;__main__\u0026#34;: main() 3. Press Ctrl + s shortcuts.\nIn the Filename section, type lab_5_console_input.py Click Save To pass input to our function when we run the file called lab_5_console_input.py, we need to use a built-in function called input(). This will prompt the user with a message and then wait for them to provide input. Modify the file called lab_5_console_input.py as follows: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) ### Change below this line only ### text = input(\u0026#34;Provide the text you want translating: \u0026#34;) source_language_code = input(\u0026#34;Provide the two letter source language code: \u0026#34;) target_language_code = input(\u0026#34;Provide the two letter target language code: \u0026#34;) def main(): translate_text( Text=text, SourceLanguageCode=source_language_code, TargetLanguageCode=target_language_code ) if __name__==\u0026#34;__main__\u0026#34;: main() Save To run the program, enter the following command in the terminal: python lab_5_console_input.py Press Enter. In the line Provide the text you want translating:, input I am learning to code in AWS and press Enter In the line Provide the two letter source language code:, input en and press Enter In the line Provide the two letter target language code:, input fr and press Enter The program will wait for you to provide a value before asking for the next prompt.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/12-errors-and-exceptions/12.2-add-error-handling-to-the-code/","title":"Add Error Handling to the Code","tags":[],"description":"","content":"Add Error Handling to the Code We add error handling to our code based on the example in the previous step. In the Cloud9 IDE, click on the + Click New File to create a new file In the editor add the following: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError # Add our input validation as a function here. def input_validation(item): languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: print(\u0026#34;There is an issue\u0026#34;) return False # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() 3. Press Ctrl + s shortcuts\nIn the Filename section, type lab_9_add_errors_handling.py Click Save We will add the try-except block Modify lab_9_add_errors_handling.py as follows: # Standard Imports import argparse import json # import logging import logging # 3rd Party Imports import boto3 from botocore.exceptions import ClientError # Set the logging file and default. The default is \u0026#39;Warning\u0026#39; logging.basicConfig(filename=\u0026#39;translate.log\u0026#39;,level=logging.DEBUG) # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): try: with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] except FileNotFoundError as e: logging.warning(\u0026#34;Error {}. Sorry the input file could not be found, check and try again\u0026#34;.format(e)) # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): try: client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) except ClientError as e: logging.warning(\u0026#34;Botocore generated an error {}\u0026#34;.format(e)) # Add a Loop to iterate over the json file. def translate_loop(): try: input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError except: logging.warning(\u0026#34;An error has caused the translation to fail, check the logs for details\u0026#34;) # Add our input validation as a function here. def input_validation(item): try: languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: logging.debug(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: logging.warning(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: logging.warning(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: logging.warning(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: logging.info(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: logging.warning(\u0026#34;There is an issue\u0026#34;) return False except: logging.warning(\u0026#34;An unspecified error has occurred \u0026#34;) # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() Save To run the program, enter the following command in the terminal: python lab_9_add_errors_handling.py --file translate_input.json Press Enter. The code using the try statement. If this fails it will use the except statement which tells it what action to carry out.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/6-functions/6.2-boto3/","title":"Boto3","tags":[],"description":"","content":"Boto3 We are going to use Amazon Translate to translate some text from English to French.\nFirst, look at the Boto3 documentation for Amazon Translate\nIn the section marked client, it tells us how to use the translate service in our program.\nIn the Boto3 documentation for AWS Translate, we can see that it supports different methods. You can explore each of these if you wish. We are going to be using the translate_text() method in our program.\nIn the translate text method, the documentation starts with translate_text(**kwargs) and then further down has a section with the title Request Syntax. The request syntax is as follows:\nresponse = client.translate_text( Text=\u0026#39;string\u0026#39;, TerminologyNames=[ \u0026#39;string\u0026#39;, ], SourceLanguageCode=\u0026#39;string\u0026#39;, TargetLanguageCode=\u0026#39;string\u0026#39; ) With these pieces of information we can build our python function. In a python function the () at the end, prior to the : is used to provide parameters which are inputs to your function.\nIn Boto3 the methods use (**kwargs). In python, this indicates that the function will accept an arbitrary number of keyword arguments. We will come back to the use of kwargs later.\nReading the documentation you will see that translate_text() has three [REQUIRED] inputs and one optional input.\nText - REQUIRED TerminologyNames - this is optional because it is not shown as required SourceLanguageCode - REQUIRED TargetLanguageCode - REQUIRED All of these are the type String, with the exception of TerminologyNames, which is a list containing comma separated values of the type String. For now, to simplify our function further we are going to remove the TerminologyNames, which is not required and provide hard coded values to our variables.\nThe SourceLanguageCode and TargetLanguageCode are listed in the documentation\nWe will be using English and French, with the codes en and fr. Click on the + Click New File to create a new file In the editor add the following: import boto3 client = boto3.client(\u0026#39;translate\u0026#39;) #### Add the new text below this line #### def translate_text(): # declare the function using def, name, braces for parameters and a colon response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, # Assigning the value of the string to the variable Text SourceLanguageCode=\u0026#39;en\u0026#39;, # We are using a two letter language code from the documentation (en = English) TargetLanguageCode=\u0026#39;fr\u0026#39; # We use a second two letter language code from the documentation (fr = French) ) When something new is introduced the code is marked up with comments, subsequently to keep the program looking clean the comment will be removed. In python, anything following the \u0026rsquo;#\u0026rsquo; will be a comment and ignored by python.\nFirst, we need to tell python to use the boto3 package we installed using pip in the python packages section of the workshop. This is done using the import boto3 statement.\nSecond, we need to tell python which specific service we want to use within the boto3 package. This is done with client = boto3.client(\u0026rsquo;translate\u0026rsquo;).\n3. Press Ctrl + s shortcuts.\nIn the Filename section, type lab_2_intro_to_boto3.py Click Save We have built our function and assigned values to our variables, we need to tell python to run the function and to output the response so we can see it. Modify the lab_2_intro_to_boto3.py file as follows: import boto3 client = boto3.client(\u0026#39;translate\u0026#39;) def translate_text(): response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, SourceLanguageCode=\u0026#39;en\u0026#39;, TargetLanguageCode=\u0026#39;fr\u0026#39; ) #### Add the new text below this line #### print(response) # this code is inside the function and will print the contents of the variable \u0026#39;response\u0026#39; translate_text() # This line will call our function. Without it, python will not do anything. Press Ctrl + s shortcuts to save. To run the program, enter the following command in the terminal: python lab_2_intro_to_boto3.py Press Enter. We will see the result. If you refer to the documentation, it will show the following:\nReturn type dict Returns Response Syntax { \u0026#39;TranslatedText\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;SourceLanguageCode\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;TargetLanguageCode\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;AppliedTerminologies\u0026#39;: [ { \u0026#39;Name\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;Terms\u0026#39;: [ { \u0026#39;SourceText\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;TargetText\u0026#39;: \u0026#39;string\u0026#39; }, ] }, ] } This is telling us that AWS is returning data as a dictionary with a specific syntax.\nCompare what has been returned from your program with the structure in the documentation. You will see that it follows the structure outlined in the documentation plus some metadata from the AWS service. This format is not easy for a human to read but it is a format used to exchange information between programs and modules. In a later lab we will find out how to extract data from this structure to present it in a format that is easier for humans to read.\nIf you look at the TranslatedText value, you should see \u0026ldquo;J\u0026rsquo;apprends à coder dans AWS\u0026rdquo;. This is the french text returned by Amazon Translate. You have just written your first python program that uses AWS. You have already learned some key concepts about variables and functions.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/10-if-statements/10.2-checking-value-in-the-list/","title":"Checking Values in a List","tags":[],"description":"","content":"Checking Values in a List Amazon Translate will only support a defined list of languages. The list of language codes that Amazon Translate will accept are provided in the Developer Guide. We can use an if statement to perform some input validation to check that the language code is in the list.\nCreate a new file called lab_7_check_language.py In the Cloud9 IDE, click on the + Click New File to create a new file In the editor add the following: import json # A defined list of languages supported by Amazon Translate languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;,\u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;,\u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;,\u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34;] # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Extracts the SourceLanguageCode and TargetLanguageCode from the JSON SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # Uses an if-else statement to check that the SourceLanguageCode is in the languages list. if SourceLanguageCode in languages: print(\u0026#34;The SourceLanguageCode is valid - proceeding\u0026#34;) else: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) 3. Press Ctrl + s shortcuts\nIn the Filename section, type lab_7_check_language.py Click Save To run the program, enter the following command in the terminal: python lab_7_check_language.py Press Enter. We will see the result We used the if statement combined with in to check if the language code for the source language is valid.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/8-input/8.2-cli-arguments/","title":"CLI Arguments","tags":[],"description":"","content":"CLI Arguments In the previous section, we were able to prompt a user for input. This is useful for human input, but more often in AWS we want to automate our workflow, which means we need a method of passing parameters via the Command Line Interface (CLI)\nCreate a new file called lab_5_cli_arguments.py Click on the + Click New File to create a new file In the editor add the following: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) ### Change below this line only ### text = input(\u0026#34;Provide the text you want translating: \u0026#34;) source_language_code = input(\u0026#34;Provide the two letter source language code: \u0026#34;) target_language_code = input(\u0026#34;Provide the two letter target language code: \u0026#34;) def main(): translate_text( Text=text, SourceLanguageCode=source_language_code, TargetLanguageCode=target_language_code ) if __name__==\u0026#34;__main__\u0026#34;: main() 3. Press Ctrl + s shortcuts.\nIn the Filename section, type lab_5_cli_arguments.py Click Save We will use argparse to input arguments from the CLI Modify the file called lab_5_cli_arguments.py as follows: import argparse # argparse is a built in python package, we add it with an import statement import boto3 # Define the parser variable to equal argparse.ArgumentParser() parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) # Add each of the arguments using the parser.add_argument() method parser.add_argument( \u0026#39;--text\u0026#39;, dest=\u0026#34;Text\u0026#34;, type=str, help=\u0026#34;The text to translate. The text string can be a maximum of 5,000 bytes long. Depending on your character set, this may be fewer than 5,000 characters\u0026#34;, required=True ) parser.add_argument( \u0026#39;--source-language-code\u0026#39;, dest=\u0026#34;SourceLanguageCode\u0026#34;, type=str, help=\u0026#34;The language code for the language of the source text. The language must be a language supported by Amazon Translate.\u0026#34;, required=True ) parser.add_argument( \u0026#39;--target-language-code\u0026#39;, dest=\u0026#34;TargetLanguageCode\u0026#34;, type=str, help=\u0026#34;The language code requested for the language of the target text. The language must be a language support by Amazon Translate.\u0026#34;, required=True ) # This will inspect the command line, convert each argument to the appropriate type and then invoke the appropriate action. args = parser.parse_args() def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) def main(): # vars() is an inbuilt function which returns a dictionary object translate_text(**vars(args)) if __name__==\u0026#34;__main__\u0026#34;: main() We used parser.add_argument() to add each of the arguments.\nArgument name for example --text.\nThe dest is required to make it a value keyword argument accepted by the parameter, otherwise it will use the default argument text=\u0026ldquo;value\u0026rdquo; which should be Text=\u0026ldquo;value\u0026rdquo;\ntype is the data type which in this case is a string (str).\nhelp is the help text shown.\nargs = parser.parse_args() will inspect the command line, convert each argument to the appropriate type and then invoke the appropriate action.\nwhen we call the translate_text() function we need to use **vars(args). The **vars turns our object created by args = parser.parse_args() into a dictionary object which we can pass as key\\:value pairs to our function\nSave To run the program, enter the following command in the terminal: python lab_5_cli_arguments.py --text \u0026#34;we are learning python on AWS\u0026#34; --source-language-code en --target-language-code fr Press Enter. We have added the parameters on the command line.\nEach parameter relates to each block for parser.add_argument.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/11-logging/11.2-log-level-and-log-file/","title":"Log Level and Log File","tags":[],"description":"","content":"Log Level and Log File The default logging level is set at warning. This can be changed so that we capture more or less information in the log files.\nWe are going to change the default log level and save our output into a local log file on the Cloud9 instance. This is done by adding the following line to configure the logging level:\nlogging.basicConfig(filename=\u0026#39;example.log\u0026#39;,level=logging.DEBUG) Create a new file called lab_8_log_level.py In the Cloud9 IDE, click on the + Click New File to create a new file In the editor add the following: # Import logging import logging import json # Set the log level in the basic configuration. This means we will capture all our log entries and not just those at Warning or above. logging.basicConfig(filename=\u0026#39;example.log\u0026#39;,level=logging.DEBUG) # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: logging.warning(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) # This will print to the console as the default level is warning else: logging.info(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) # This will not print to the console because it is lower than warning 3. Press Ctrl + s shortcuts\nIn the Filename section, type lab_8_log_level.py Click Save To run the program, enter the following command in the terminal: python lab_8_log_level.py Press Enter. We will see the example.log file was created Open the example.log file to see the logs Open the lab_8_log_level.py file Modify lab_8_log_level.py as follows: # Import logging import logging import json # Set the log level in the basic configuration. This means we will capture all our log entries and not just those at Warning or above. logging.basicConfig(filename=\u0026#39;example.log\u0026#39;,level=logging.DEBUG) # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;en\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) # Defines two variables to store the language code from the input. SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # The if statement checks to see if the language code is the same as the source code if SourceLanguageCode == TargetLanguageCode: logging.warning(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - stopping\u0026#34;) # This will print to the console as the default level is warning else: logging.info(\u0026#34;The Source Language and Target Language codes are different - proceeding\u0026#34;) # This will not print to the console because it is lower than warning Save To run the program, enter the following command in the terminal: python lab_8_log_level.py Press Enter. Open the example.log file to see all the logs "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/9-loop/9.2-looping-over-json/","title":"Looping over JSON","tags":[],"description":"","content":"Looping over Dictionaries and JSON Open the file called translate_input.json Modify the translate_input.json file as follows: { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;What is cloud computing?\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;Cloud computing is the on-demand delivery of IT resources over the Internet with pay-as-you-go pricing.\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;Instead of buying, owning, and maintaining physical data centers and servers, you can access technology services, such as computing power, storage, and databases, on an as-needed basis from a cloud provider like Amazon Web Services (AWS)\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;Who is using cloud computing?\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;Organizations of every type, size, and industry are using the cloud for a wide variety of use cases, such as data backup, disaster recovery, email, virtual desktops, software development and testing, big data analytics, and customer-facing web applications.\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;For example, healthcare companies are using the cloud to develop more personalized treatments for patients. Financial services companies are using the cloud to power real-time fraud detection and prevention.\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; }, { \u0026#34;Text\u0026#34;:\u0026#34;And video game makers are using the cloud to deliver online games to millions of players around the world.\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } Save Create a new file called lab_6_loops.py Click on the + Click New File to create a new file In the editor add the following: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True) args = parser.parse_args() # Functions def open_input(): \u0026#34;\u0026#34;\u0026#34;This function returns a dictionary containing the contents of the Input section in the input file\u0026#34;\u0026#34;\u0026#34; with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: # Here we iterate over all dictionaries in the Input list translate_text(**item) # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() 4. Press Ctrl + s shortcuts.\nIn the Filename section, type lab_6_loops.py Click Save To run the program, enter the following command in the terminal: python lab_6_loops.py --file translate_input.json Press Enter. We will see the result. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/4-data-types/4.2-numbers/","title":"Numbers","tags":[],"description":"","content":"Numbers An integer is a whole number such as 50. The data type integer is abbreviated to int.\nA floating point number is a number followed by a decimal point such as 50.5.\nUsing Number Variables in Strings In the previous section on strings you learnt that you can use the + to add strings together to form sentences. You also learned that you can insert variables into a sentence using the {}.\nWhat happens if we try to use a number with these two different methods?\nTry the following code: Type or copy the following into the python interactive mode my_int = 50 sentence = \u0026#34;The total comes to: \u0026#34; print(sentence + my_int) Press Enter. We will see the TypeError error. TypeErrors are very common when you are learning python. Python is telling you that you are trying to use a data type that will not work. In this case you cannot add a string and a number together.\nFix the error by converting the int data type to a str data type. Type or copy the following into the python interactive mode my_int = 50 sentence = \u0026#34;The total comes to: \u0026#34; print(sentence + str(my_int)) Press Enter. We will see the result. We have used the str() method to convert the variable from an integer to a string. In most cases python will determine the type of data without having to declare it. However, it can be useful to tell python exactly how you want to treat the data type. Other examples are:\nstr() returns a string object int() returns an integer object float() returns a floating point object bool() a boolean value of True or False "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/2-prepare/","title":"Preparation","tags":[],"description":"","content":"Overview In this section, we will create the Cloud9 IDE, learn about Python Version and learn about Virtual Environments.\nContent: Create Cloud9 Python Version Virtual Environments "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/2-prepare/2.2-python-version/","title":"Python Version","tags":[],"description":"","content":"Checking the Python Version In the AWS Cloud9 environment: At the command prompt type python Press Enter. You will see the Python Version is 3.7.10 The version may change to later versions of python for example 3.8 or 3.10.\nInteractive Mode This is the interactive python environment. You can enter python commands directly into this and they will run as python. This is a great tool for quickly testing python commands.\nTry that now using an example. Type or copy the following into the python interactive environment after the \u0026gt;\u0026gt;\u0026gt; some_string = \u0026#34;Hello Python\u0026#34; print(some_string) Press Enter. You will see the result. We have just created your first python variable called some_string and given it a value \u0026ldquo;Hello Python\u0026rdquo;.\nWe then printed the value of the variable using the built in print function.\nTo exit the python environment use crtl + d or by typing exit() and pressing Enter. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/11-logging/11.3-add-logging-to-our-code/","title":"Add logging to our code","tags":[],"description":"","content":"Add logging to our code Create a new file called lab_8_logging.py In the Cloud9 IDE, click on the + Click New File to create a new file In the editor add the following: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError # Add our input validation as a function here. def input_validation(item): languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: print(\u0026#34;There is an issue\u0026#34;) return False # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() 3. Press Ctrl + s shortcuts\nIn the Filename section, type lab_8_logging.py Click Save Modify our code to add logging to our code as follows: # Standard Imports import argparse import json # import logging import logging # 3rd Party Imports import boto3 # Set the logging file and default. The default is \u0026#39;Warning\u0026#39; logging.basicConfig(filename=\u0026#39;translate.log\u0026#39;,level=logging.DEBUG) # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError # Add our input validation as a function here. def input_validation(item): languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: logging.info(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) logging.debug(\u0026#34;The value of SourceLanguageCode is {}\u0026#34;.format(SourceLanguageCode)) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: logging.warning(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: logging.warning(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: logging.warning(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: logging.info(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: logging.warning(\u0026#34;There is an issue\u0026#34;) return False # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() Save To run the program, enter the following command in the terminal: python lab_8_logging.py --file translate_input.json Press Enter. Open the translate.log file to see all the logs Verbose logging using debug is good when you are in non-production environments, but you would want to set the default level to warning in production to only capture important events.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/4-data-types/4.3-dictionaries/","title":"Dictionaries","tags":[],"description":"","content":"Dictionaries A dictionary is a way of storing related information in key-value pairs. It uses a key as an identifier and a value to store the information. For example, the key could be first_name and the value could be Ada.\nA dictionary when written in python would look like {\u0026ldquo;first_name\u0026rdquo;:\u0026ldquo;Ada\u0026rdquo;}. A dictionary in python is abbreviated to dict and has the following syntax {\u0026ldquo;key\u0026rdquo;:\u0026ldquo;value\u0026rdquo;}. The key is a string providing an identifier and the value can be the same kind of values you would store in a variable.\nDictionaries are very common in AWS, so you will see them frequently:\nThey are used to exchange information between different services and functions They are returned by Application Programming Interfaces (API) They are used as Tag values Create Dictionaries can be created by assigning the key-values you want to store in the dictionary.\nCreate a dictionary has the contents: Type or copy the following into the python interactive mode user = {\u0026#34;first_name\u0026#34;:\u0026#34;Ada\u0026#34;} print(user) Press Enter. We will see the result. Create an empty dictionary (two ways): Assigning {} to a variable, type or copy the following into the python interactive mode first_empty_dictionary = {} print(first_empty_dictionary) Press Enter. Using the dict() constructor, type or copy the following into the python interactive mode second_empty_dictionary = dict() print(second_empty_dictionary) Press Enter. We will see the result. Read To read the value associated with a key, you need to provide the name of the dictionary and the the value of the key inside square brackets.\nType or copy the following into the python interactive mode user = {\u0026#34;first_name\u0026#34;:\u0026#34;Ada\u0026#34;} print(user[\u0026#34;first_name\u0026#34;]) Press Enter. We will see the result. We read the value associated with the first_name key of the user dictionary. Update Dictionaries are mutable, which means they can be changed after you create them. You can add, update or delete the key-value pairs in a dictionary.\nTo add an additional key-value to a dictionary, provide the dictionary name, the new key in [] and a value after an = sign. Type or copy the following into the python interactive mode user[\u0026#34;family_name\u0026#34;] = \u0026#34;Byron\u0026#34; print(user) Press Enter. We will see the result. We added a key-value to the user dictionary. To modify a value in a similar way to adding it. You provide the new value after the = sign. Type or copy the following into the python interactive mode user[\u0026#34;family_name\u0026#34;] = \u0026#34;Lovelace\u0026#34; print(user) Press Enter. We will see the result. We changed the value associated with the first_name key to \u0026ldquo;Lovelace\u0026rdquo; To remove a key-value pair you use the del statement with the name of the dictionary and the key you want to delete. Type or copy the following into the python interactive mode del user[\u0026#34;family_name\u0026#34;] print(user) Press Enter. We will see the result. We deleted the key-value pair whose key is first_name A dictionary, like a variable can contain other data types, including other dictionaries and lists. You will use dictionaries a lot in AWS as input and outputs.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/10-if-statements/10.3-elif/","title":"Elif","tags":[],"description":"","content":"Elif The and statement is a logical operator that combines the check for both source language and target language. The elif statement allows us to introduce multiple different logical checks.\nCreate a new file called lab_7_elif.py In the Cloud9 IDE, click on the + Click New File to create a new file In the editor add the following: import json # A defined list of languages supported by Amazon Translate languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;,\u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;,\u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;,\u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34;] # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # Uses an if-elif-else statements to check that the SourceLanguageCode is in the languages list. if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanaguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) else: print(\u0026#34;There is an issue\u0026#34;) 3. Press Ctrl + s shortcuts\nIn the Filename section, type lab_7_elif.py Click Save To run the program, enter the following command in the terminal: python lab_7_elif.py Press Enter. See the result We will test the code by changing the values of the SourceLanguageCode and the TargetLanguageCode Make the SourceLanguageCode and TargetLanguageCode identical values. Modify lab_7_elif.py as follows: import json # A defined list of languages supported by Amazon Translate languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;,\u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;,\u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;,\u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34;] # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;en\u0026#34; } ] } \u0026#34;\u0026#34;\u0026#34; json_input = json.loads(json_string) SourceLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] # Uses an if-elif-else statements to check that the SourceLanguageCode is in the languages list. if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanaguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) else: print(\u0026#34;There is an issue\u0026#34;) Save To run the program, enter the following command in the terminal: python lab_7_elif.py Press Enter. See the result Do the same making the SourceLanguageCode and TargetLanguageCode identical values, we test the following case and see the result:\nChange the SourceLanguageCode and TargetLanguageCode to different but not valid values. Change the SourceLanguageCode to a value not supported and TargetLanguageCode to a supported value. Change the SourceLanguageCode to a supported value and the TargetLanguageCode to a not supported value. Change both the SourceLanguageCode and TargetLanguageCode to supported but different values. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/8-input/8.3-input-from-a-file/","title":"Input from a file","tags":[],"description":"","content":"Input from a file So far all our inputs have been provided either by a human interaction with the command prompt or via human configuration at the command line.\nThe open function is a built-in function. The documentation shows that there is an optional mode that can be passed in. we will pass in r. This indicates that the file is opened as read-only. To write to the file you need to use w.\nTo get input from an external file we use the format:\nwith open(filename, \u0026#39;r\u0026#39; ) as variable_name: \u0026lt;Do something with the variable here\u0026gt; Create a new file called lab_5_input_text_file.py Click on the + Click New File to create a new file In the editor add the following: def open_input(file): with open(file, \u0026#39;r\u0026#39;) as f: text = f.read() #We use read() to read the actual contents of the file print(text) def main(): open_input(\u0026#34;text.txt\u0026#34;) if __name__==\u0026#34;__main__\u0026#34;: main() 3. Press Ctrl + s shortcuts.\nIn the Filename section, type lab_5_input_text_file.py Click Save Create a new file called text.txt Click on the + Click New File to create a new file In the editor add the following: \u0026#34;The Quick Brown Fox\u0026#34; 6. Press Ctrl + s shortcuts.\nIn the Filename section, type text.txt Click Save To run the program, enter the following command in the terminal: python lab_5_input_text_file.py Press Enter. We will see that it returns the text from text.txt We can now read input from a file.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/9-loop/9.3-list-comprehensions/","title":"List Comprehensions","tags":[],"description":"","content":"List Comprehensions We will generate a list of just the text we want to translate out of the provided data of the translate_input.json file Open the lab_6_loops.py file Add the following function to our code in lab_6_loops.py # Create a list of the input text def new_input_text_list(): input_text = open_input() new_list = [] for item in input_text: text = item[\u0026#39;Text\u0026#39;] new_list.append(text) print(new_list) Call the new_input_text_list() function from your main() look like: def main(): new_input_text_list() translate_loop() Save To run the program, enter the following command in the terminal: python lab_6_loops.py --file translate_input.json Press Enter. See the result. We will see the return is a list look like:\n[\u0026#39;What is cloud computing?\u0026#39;, \u0026#39;Cloud computing is the on-demand delivery of IT resources over the Internet with pay-as-you-go pricing.\u0026#39;, \u0026#39;Instead of buying, owning, and maintaining physical data centers and servers, you can access technology services, such as computing power, storage, and databases, on an as-needed basis from a cloud provider like Amazon Web Services (AWS)\u0026#39;, \u0026#39;Who is using cloud computing?\u0026#39;, \u0026#39;Organizations of every type, size, and industry are using the cloud for a wide variety of use cases, such as data backup, disaster recovery, email, virtual desktops, software development and testing, big data analytics, and customer-facing web applications.\u0026#39;, \u0026#39;For example, healthcare companies are using the cloud to develop more personalized treatments for patients. Financial services companies are using the cloud to power real-time fraud detection and prevention.\u0026#39;, \u0026#39;And video game makers are using the cloud to deliver online games to millions of players around the world.\u0026#39;] List Comprehensions We will use a for loop to generate new lists using .append() is a perfectly valid way of generating new lists. However, we can use a list comprehension to reduce this to a single line. It combines the for loop and the creation of the list into a single line. Open the lab_6_loops.py file Add the following function to our code in lab_6_loops.py def new_list_comprehension(): input_text = open_input() list_comprehension = [item[\u0026#39;Text\u0026#39;] for item in input_text] print(list_comprehension) Call the new_list_comprehension() function from your main() look like: def main(): new_input_text_list() translate_loop() new_list_comprehension() Save To run the program, enter the following command in the terminal: python lab_6_loops.py --file translate_input.json Press Enter. See the result. We will see that it performs the same function as the for loop but on a single line. Although these look complex to start with we can break down the structure to make it easier to remember.\nWe will see list comprehensions used in other code, so if we don\u0026rsquo;t decide to use them, we will at least be able to determine what they are doing.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/6-functions/6.3-main-function/","title":"The main() function","tags":[],"description":"","content":"The main() function The main() function sets the entry point for a python program. A python program will run line by line, but it won\u0026rsquo;t run the functions until it comes to a line which calls the function.\nIn the section 6.2, we called the translate_text() function by the line translate_text(). We can review this below.\nimport boto3 client = boto3.client(\u0026#39;translate\u0026#39;) def translate_text(): response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, SourceLanguageCode=\u0026#39;en\u0026#39;, TargetLanguageCode=\u0026#39;fr\u0026#39; ) #### Add the new text below this line #### print(response) # this code is inside the function and will print the contents of the variable \u0026#39;response\u0026#39; translate_text() # This line will call our function. Without it, python will not do anything. When this code is run, the interpreter will define a special variable called __name__ and assign the value of \u0026quot;__main__\u0026quot; to the code in this python file. So the code in our python file becomes __name__ == \u0026ldquo;__main__\u0026rdquo;.\nWhen we use import statements, we can import code from other files into our python program. When this happens, the imported code is set a __name__ value of the modules name.\nBy setting the __name__==\u0026quot;__main__\u0026quot; we can control the order in which the code in this file is executed, telling python to run the code in this file which has the name of __main__ rather than the code imported from another file. This avoids situations where your code could run an imported script, resulting in unwanted behavior.\nWe do this using an if statement. If statements are covered in more detail later. At this stage, all you need to understand is that it is telling the python interpreter that if the __name__ is equal to __main__ which relates to the code in this python file, then run the main() function.\nThe main() function therefore sets the start point for our code to control the order in which our code executes. It is conventional to include all the calls to your functions within the main() function. This will help others to read your code and understand the logic and flow.\nWe will use the main() function in the next python file. Click on the + Click New File to create a new file In the editor add the following: import boto3 client = boto3.client(\u0026#39;translate\u0026#39;) def translate_text(): response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, SourceLanguageCode=\u0026#39;en\u0026#39;, TargetLanguageCode=\u0026#39;fr\u0026#39; ) print(response) # this code is inside the function and will print the contents of the variable \u0026#39;response\u0026#39; def main(): translate_text() if __name__==\u0026#34;__main__\u0026#34;: main() 3. Press Ctrl + s shortcuts.\nIn the Filename section, type lab_3_main_function.py Click Save To run the program, enter the following command in the terminal: python lab_3_main_function.py Press Enter. We will see the result. This topic can be confusing. If you have struggled to understand what is going on here, don\u0026rsquo;t worry! You will see this used throughout the rest of the workshop and you will soon start to recognize how to use it, you can then return to this lab to refresh your understanding.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/2-prepare/2.3-virtual-environment/","title":"Virtual Environments","tags":[],"description":"","content":"Create a Virtual Environment A virtual environment in python is a container in which all your code and other python packages reside. It allows you to keep your python configuration separate from other versions on your system. It is a good idea to always use a virtual environment when developing python code.\nYou can choose a name for your virtual environment such as my_environment, but often you see a virtual environment called venv.\nTo create a virtual environment we will use the following command: python -m venv my_venv Once the virtual environment has been created, you need to activate it. Once activated, your code runs inside the environment, including any packages you install.\nTo activate the environment use one of the following commands For Linux/macOS, execute the following command: source my_venv/bin/activate For Windows (Git-Bash), execute the following command: source my_venv/Scripts/activate For Windows (PowerShell), execute the following command: .\\my_venv\\Scripts\\Activate.ps1 To know you are inside the virtual environment your command prompt will have the prefix (my_venv). Now any packages you use will be stored in a folder structure inside your virtual environment.\nTo exit from the virtual environment, you type deactivate and the command prompt will no longer be prefixed by (my_venv).\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/3-variables/","title":"Variables","tags":[],"description":"","content":"Variables A variable is a value that can change. They can be used to store information that can be referenced and used by programs. Instead of using the stored value directly, we can use the variable instead. Variables could be any number of things, such as, a string of text, a list or an object. Using variables makes our code flexible and reusable. Without variables we would have to hard code all our values into the code.\nVariable names are defined when you declare them. The convention for variable names is set out in pep8 , the style guide for python. They should be lowercase, with words separated by underscores as necessary to improve readability.\nVariables in python are declared in the format name = value. In python we can store different types of data without having to be explicit about the type when we declare it.\nBelow are some examples:\na_str = \u0026#34;This is an example of a string in quotes\u0026#34; # In python the word string is abbreviated to str my_float = 5.5 an_integer = 5 # integer is abbreviated to int shopping_list = [\u0026#34;apples\u0026#34;, \u0026#34;oranges\u0026#34;, \u0026#34;pears\u0026#34;] a_dict = {\u0026#34;userId\u0026#34;: \u0026#34;JBloggs\u0026#34;} # dictionary is abbreviated to dict my_var = another_variable # variable is abbreviated to var test_function = my_function() #function is abbreviated to func example_tuple = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pear\u0026#34;) boolean_values = True # boolean is abbreviated to bool "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/10-if-statements/10.4-add-input-validation/","title":"Add input validation","tags":[],"description":"","content":"Add input validation We will add our input validation as a function, each of the if-elif-else statements will return True or False boolean values. We will add a call to the input validation function to the for loop in the translate_loop() function.\nCreate a new file called lab_7_input_validation.py In the Cloud9 IDE, click on the + Click New File to create a new file In the editor add the following: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True ) args = parser.parse_args() # Functions # Open the input file to get the json. def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;] # Boto3 function to use Amazon Translate to translate the text and only return the Translated Text def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response[\u0026#39;TranslatedText\u0026#39;]) # Add a Loop to iterate over the json file. def translate_loop(): input_text = open_input() for item in input_text: if input_validation(item) == True: translate_text(**item) else: raise SystemError # Add our input validation as a function here. def input_validation(item): languages = [\u0026#34;af\u0026#34;,\u0026#34;sq\u0026#34;,\u0026#34;am\u0026#34;,\u0026#34;ar\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;bn\u0026#34;,\u0026#34;bs\u0026#34;,\u0026#34;bg\u0026#34;,\u0026#34;zh\u0026#34;,\u0026#34;zh-TW\u0026#34;,\u0026#34;hr\u0026#34;,\u0026#34;cs\u0026#34;,\u0026#34;da\u0026#34;,\u0026#34;fa-AF\u0026#34;, \u0026#34;nl\u0026#34;,\u0026#34;en\u0026#34;,\u0026#34;et\u0026#34;,\u0026#34;fi\u0026#34;,\u0026#34;fr\u0026#34;,\u0026#34;fr-CA\u0026#34;,\u0026#34;ka\u0026#34;,\u0026#34;de\u0026#34;,\u0026#34;el\u0026#34;,\u0026#34;ha\u0026#34;,\u0026#34;he\u0026#34;,\u0026#34;hi\u0026#34;,\u0026#34;hu\u0026#34;,\u0026#34;id\u0026#34;,\u0026#34;it\u0026#34;, \u0026#34;ja\u0026#34;,\u0026#34;ko\u0026#34;,\u0026#34;lv\u0026#34;,\u0026#34;ms\u0026#34;,\u0026#34;no\u0026#34;,\u0026#34;fa\u0026#34;,\u0026#34;ps\u0026#34;,\u0026#34;pl\u0026#34;,\u0026#34;pt\u0026#34;,\u0026#34;ro\u0026#34;,\u0026#34;ru\u0026#34;,\u0026#34;sr\u0026#34;,\u0026#34;sk\u0026#34;,\u0026#34;sl\u0026#34;,\u0026#34;so\u0026#34;,\u0026#34;es\u0026#34;, \u0026#34;sw\u0026#34;,\u0026#34;sv\u0026#34;,\u0026#34;tl\u0026#34;,\u0026#34;ta\u0026#34;,\u0026#34;th\u0026#34;,\u0026#34;tr\u0026#34;,\u0026#34;uk\u0026#34;,\u0026#34;ur\u0026#34;,\u0026#34;vi\u0026#34; ] json_input=item SourceLanguageCode = json_input[\u0026#39;SourceLanguageCode\u0026#39;] TargetLanguageCode = json_input[\u0026#39;TargetLanguageCode\u0026#39;] if SourceLanguageCode == TargetLanguageCode: print(\u0026#34;The SourceLanguageCode is the same as the TargetLanguageCode - nothing to do\u0026#34;) return False elif SourceLanguageCode not in languages and TargetLanguageCode not in languages: print(\u0026#34;Neither the SourceLanguageCode and TargetLanguageCode are valid - stopping\u0026#34;) return False elif SourceLanguageCode not in languages: print(\u0026#34;The SourceLanguageCode is not valid - stopping\u0026#34;) return False elif TargetLanguageCode not in languages: print(\u0026#34;The TargetLanguageCode is not valid - stopping\u0026#34;) return False elif SourceLanguageCode in languages and TargetLanguageCode in languages: print(\u0026#34;The SourceLanguageCode and TargetLanguageCode are valid - proceeding\u0026#34;) return True else: print(\u0026#34;There is an issue\u0026#34;) return False # Main Function - use to call other functions def main(): translate_loop() if __name__ == \u0026#34;__main__\u0026#34;: main() 3. Press Ctrl + s shortcuts\nIn the Filename section, type lab_7_input_validation.py Click Save To run the program, enter the following command in the terminal: python lab_7_input_validation.py --file translate_input.json Press Enter. See the result "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/4-data-types/","title":"Data Types","tags":[],"description":"","content":"Overview In this section we look at data types. The computer needs to know whether a variable is a string or a number or another type of data. This to prevent mistakes like attempting to add a string \u0026ldquo;Alice\u0026rdquo; to a number 5.\nContent: Strings Numbers Dictionaries Lists Determining Type "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/8-input/8.4-json/","title":"JSON","tags":[],"description":"","content":"JSON JSON stands for Javascript Object Notation and is pronounced \u0026ldquo;jason\u0026rdquo;. It is a very similar structure to python dictionaries and lists, with only a few exceptions. It is a very common format for computer programs to exchange information in using Application Programming Interfaces (APIs).\nWhen we convert Python to JSON there is some conversion that takes place. The mapping is shown below:\nPython JSON dict object list,tuple array str string int, float number True true False false None null For this reason, we need to use the json package to perform the conversion. The json package is a standard python package so there is no need to install it with pip.\njson.loads() \u0026amp; json.dumps() Before we use an external file it is worth spending time learning about json.loads() and json.dumps(). These two methods use JSON strings, denoted by the \u0026rsquo;s\u0026rsquo;. When learning to manipulate JSON it is easy to get confused between json.loads() and json.load() or json.dumps() and json.dump().\nHere is the easy way to know which to use.\njson.load() \u0026amp; json.dump() - Use to input and output JSON from files and into files. json.loads() \u0026amp; json.dumps() - Use to input and outputting JSON from strings and into strings. Create a new file called lab_5_json_input.py Click on the + Click New File to create a new file In the editor add the following: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34;, \u0026#34;Required\u0026#34;: true } ] } \u0026#34;\u0026#34;\u0026#34; def main(): json_input = json.loads(json_string) print(json_input) if __name__==\u0026#34;__main__\u0026#34;: main() The parameters should by now look familiar as our inputs to the Amazon Translate service, with the addition of an extra parameter, \u0026ldquo;Required\u0026rdquo;: true. This is just for illustration, and we will remove it in a moment.\n3. Press Ctrl + s shortcuts.\nIn the Filename section, type lab_5_json_input.py Click Save To run the program, enter the following command in the terminal: python lab_5_json_input.py Press Enter. We will see the result. The parameters should by now look familiar as our inputs to the Amazon Translate service, with the addition of an extra parameter, \u0026ldquo;Required\u0026rdquo;: true. This is just for illustration, and we will remove it in a moment.\n5. This format is not easy to read, but we can get python to provide the same formatting of indentation as our original string that we passed in as the variable json_string. To do this we are going to use json.dumps() but with an added parameter to format the string with indentation.\nModify the file called lab_5_json_input.py as follows: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34;, \u0026#34;Required\u0026#34;: true } ] } \u0026#34;\u0026#34;\u0026#34; def main(): json_input = json.loads(json_string) indented_format = json.dumps(json_input, indent=2) print(indented_format) if __name__==\u0026#34;__main__\u0026#34;: main() Save To run the program, enter the following command in the terminal: python lab_5_json_input.py Press Enter. We will see the result. We added additional formatting using indent = 2 to make the JSON easier to read. Navigating a JSON Structure Learning to navigate a JSON structure to use the information you need is probably one of the most fundamental lessons you will learn when using python with AWS.\nIf you look at the structure above you can see that it comprises a dictionary with a key of \u0026ldquo;Input\u0026rdquo; and a value of a list containing another dictionary. This is called nesting. It is very common to have dictionaries which contain lists, which contain dictionaries. This structure can keep being nested, so you need to learn how to navigate it.\nModify the file called lab_5_json_input.py as follows: import json # This uses a json string as an input json_string = \u0026#34;\u0026#34;\u0026#34; { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34;, \u0026#34;Required\u0026#34;: true } ] } \u0026#34;\u0026#34;\u0026#34; # Modify below this line def main(): json_input = json.loads(json_string) text = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;Text\u0026#39;] source_language_code = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;SourceLanguageCode\u0026#39;] target_language_code = json_input[\u0026#39;Input\u0026#39;][0][\u0026#39;TargetLanguageCode\u0026#39;] print(text, source_language_code, target_language_code) if __name__==\u0026#34;__main__\u0026#34;: main() We will see the navigating the JSON structure:\nFirst, because the JSON is in the variable json_input we used this as our first reference.\nNext, the first dictionary key is \u0026ldquo;Input\u0026rdquo; so this is placed in [] as [\u0026lsquo;Input\u0026rsquo;].\nNext, in our structure is a list. A list uses an index, and the index starts at 0 for our first item. So to get the first item we use [0].\nNext we want to get the values for \u0026ldquo;Text\u0026rdquo;,\u0026ldquo;SourceLanguageCode\u0026rdquo; and \u0026ldquo;TargetLanguageCode\u0026rdquo;.\nSave To run the program, enter the following command in the terminal: python lab_5_json_input.py Press Enter. We will see the result. json.load() \u0026amp; json.dump() We will create a file called translate_input.json with some JSON data that we will use for the Amazon Translate service to use. Click on the + Click New File to create a new file In the editor add the following: { \u0026#34;Input\u0026#34;:[ { \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } ] } 11. Press Ctrl + s shortcuts.\nIn the Filename section, type translate_input.json Click Save Open the file call lab_5_json_input.py Modify the file called lab_5_json_input.py as follows: # Standard Imports import argparse import json # 3rd Party Imports import boto3 # Arguments parser = argparse.ArgumentParser(description=\u0026#34;Provides translation between one source language and another of the same set of languages.\u0026#34;) parser.add_argument( \u0026#39;--file\u0026#39;, dest=\u0026#39;filename\u0026#39;, help=\u0026#34;The path to the input file. The file should be valid json\u0026#34;, required=True) args = parser.parse_args() # Functions def open_input(): with open(args.filename) as file_object: contents = json.load(file_object) return contents[\u0026#39;Input\u0026#39;][0] def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) # Main Function - use to call other functions def main(): kwargs = open_input() translate_text(**kwargs) if __name__ == \u0026#34;__main__\u0026#34;: main() Save To run the program, enter the following command in the terminal: python lab_5_json_input.py --file translate_input.json Press Enter. We will see the result. We used json.loads() and json.dumps() to manipulate JSON strings.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/4-data-types/4.4-lists/","title":"Lists","tags":[],"description":"","content":"Lists A list is an ordered sequence of values separated by spaces. For example: [0, 1, 2, 3, 4] or [\u0026ldquo;apples\u0026rdquo;, \u0026ldquo;oranges\u0026rdquo;, \u0026ldquo;bananas\u0026rdquo;]\nA list can contain other objects(for example dictionaries). For example: [{\u0026ldquo;fruit_type\u0026rdquo; : \u0026ldquo;apples\u0026rdquo;}, {\u0026ldquo;number\u0026rdquo; : 50}]\nCreate a list Lists can be created by assigning the values you want to store in a list to a variable Type or copy the following into the python interactive mode fruit = [\u0026#34;apples\u0026#34;,\u0026#34;oranges\u0026#34;,\u0026#34;bananas\u0026#34;] print(fruit) Press Enter. We will see the result. If you are going to be adding the contents of the list later, you can declare an empty list. You can create an empty list in two ways: Assigning [] to a variable. Type or copy the following into the python interactive mode first_empty_list = [] print(first_empty_list) Press Enter. We will see the result. Using the list() constructor. Type or copy the following into the python interactive mode second_empty_list = list() print(second_empty_list) Press Enter. We will see the result. Read Objects stored in list are given an index number starting at 0. To read an element from a list you use the index number of the stored value. 3. Type or copy the following into the python interactive mode\nfruit = [\u0026#34;apples\u0026#34;,\u0026#34;oranges\u0026#34;,\u0026#34;bananas\u0026#34;] print(fruit[1]) Press Enter. We will see the result. In the example above python has printed the value stored at the index position 1, which has returned oranges, because the first index is position 0.\nTo find the length of a list using len() Type or copy the following into the python interactive mode len(fruit) Press Enter. We will see the result. We can return the last value in a list or work backwards from the last item using a negative index value. For example to return the last value in the list we use the index value is -1 Type or copy the following into the python interactive mode print(fruit[-1]) print(fruit[-2]) Press Enter. We will see the result. Update Lists are mutable, which means they can be changed after you create them. You can add, update, delete and reorder elements in a list.\nWe can use append() to add an element to the end of the list. Type or copy the following into the python interactive mode fruit.append(\u0026#34;kiwi\u0026#34;) print(fruit) Press Enter. We will see the result. We added an element to the end of the fruit list If we want add an element at a specific point in the list you can use the index value with the insert() method. Type or copy the following into the python interactive mode fruit.insert(2, \u0026#34;passion fruit\u0026#34;) print(fruit) Press Enter. We will see the result. Organizing a list The elements in a list are not sorted automatically.\nIf we want to return information which is sorted, but retain the original order of the list, you can use the sorted() function. Type or copy the following into the python interactive mode print(sorted(fruit)) print(fruit) Press Enter. We will see the result. In the example above you can see that the sorted() function return a sorted list, but does not alter the original order of the list.\nIf we want to permanently sort the list, you should use the sort() method. Type or copy the following into the python interactive mode fruit.sort() print(fruit) Press Enter. We will see the result. To reverse the order of a list you can use the reverse() method. This will permanently reverse the order of the list. Type or copy the following into the python interactive mode fruit.reverse() print(fruit) Press Enter. We will see the result. Delete We can remove elements from a list using the del statement if you know the index position. Type or copy the following into the python interactive mode del fruit[1] print(fruit) Press Enter. We will see the result. If we want to use the value after removing it from a list you use the pop() method. To use pop(), we need to store the value you have removed from the list inside another variable. Type or copy the following into the python interactive mode favorite_fruit = fruit.pop() print(favorite_fruit) Press Enter. We will see the result. pop() has returned the last element in the list, which is the default for pop(). You can return any element with the pop() by using the index value. Type or copy the following into the python interactive mode fresh_fruit = fruit.pop(1) print(fresh_fruit) Press Enter. We will see the result. If you don\u0026rsquo;t know the index position, or you don\u0026rsquo;t want to remove the last item in the list, you can use the remove() method to specify the value of the element you want to remove. Type or copy the following into the python interactive mode fruit.remove(\u0026#39;bananas\u0026#39;) print(fruit) Press Enter. We will see the result. When you use del, pop() or remove(), the element is permanently deleted from the original list. If the list is printed out, you will see that those elements are no longer stored in the list.\n"},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/4-data-types/4.5-determining-type/","title":"Determining Type","tags":[],"description":"","content":"Determining Type Sometimes your code will raise a TypeError. These can be frustrating to fix. The first step is often to find out what type of data python thinks the object is.\nThe way to find out what type of data python has stored in a variable is to use the type() method.\nType or copy the following into the python interactive mode my_variable = \u0026#34;A string\u0026#34; print(type(my_variable)) Press Enter. We will see the result. Once you know the type data, you can fix the issue by being explicit about how you want python to treat the data.\nType or copy the following into the python interactive mode my_number = 50 some_string = \u0026#34;The number is \u0026#34; print(some_string + my_number) Press Enter. We will see the result. We can fix the TypeError by telling python to convert my_number to a string. Type or copy the following into the python interactive mode my_number = 50 some_string = \u0026#34;The number is \u0026#34; print(some_string + my_number) Press Enter. We will see the result. That error was fixxed. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/5-packages/","title":"Python Packages","tags":[],"description":"","content":"Python Packages We are nearly ready to start interacting with AWS. Before we do this we need to install some additional software called a package.\nA python package is code comprising of individual components called modules that we can use in our code. Packages save us from having to write every aspect of our program from scratch by allowing us to use other peoples code. By importing packages into our program we can use the features of that package. Python has common packages that are included, others have to be installed into our virtual environment using the python package manager pip\nTo work with AWS you will need to install the Boto3 package\nAt the command prompt in the terminal type: pip install boto3 If you get an error message. Check you have exited from the python interactive environment indicated by \u0026raquo;\u0026gt;. You should be at $ prompt in the shell.\nWe can see what packages we have installed at any time by typing the following: pip freeze We will see the result. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/6-functions/","title":"Functions","tags":[],"description":"","content":"Overview In this section, we will start with a simple function and then write a function which uses the Amazon Translate Service.\nContent: Simple Function Boto3 The main() function "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/7-arguments-and-parameters/","title":"Arguments and Parameters","tags":[],"description":"","content":"Arguments are used to pass values between programs, subroutines or functions. When an argument is used to customize a program, it is called a parameter. In other words, A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method\u0026rsquo;s parameters.\nPositional Arguments The positional arguments, as the name suggests the order that the argument is passed to the function depends on order within the brackets ().\nCreate a new file called lab_4_positional_arguments.py Click on the + Click New File to create a new file In the editor add the following: import boto3 def translate_text(): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text( Text=\u0026#39;I am learning to code in AWS\u0026#39;, SourceLanguageCode=\u0026#39;en\u0026#39;, TargetLanguageCode=\u0026#39;fr\u0026#39; ) print(response) def main(): translate_text() if __name__==\u0026#34;__main__\u0026#34;: main() 3. Press Ctrl + s shortcuts.\nIn the Filename section, type lab_4_positional_arguments.py Click Save Amend the function so that we have some positional arguments and save: import boto3 def translate_text(text, source_language_code, target_language_code): # we define the positional arguments in the () client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text( Text=text, # we remove the hard coded value SourceLanguageCode=source_language_code, # we used the positional argument instead TargetLanguageCode=target_language_code ) print(response) def main(): translate_text(\u0026#39;I am learning to code in AWS\u0026#39;,\u0026#39;en\u0026#39;,\u0026#39;fr\u0026#39;) # we provide the value for the arguments when we call the function in the correct positional order. if __name__==\u0026#34;__main__\u0026#34;: main() The values: \u0026lsquo;I am learning to code in AWS\u0026rsquo;, \u0026rsquo;en\u0026rsquo;, \u0026lsquo;fr\u0026rsquo; are positional arguments were passed to the parameters: text, source_language_code, target_language_code.\nTo run the program, enter the following command in the terminal: python lab_4_positional_arguments.py Press Enter. We will see the result. Keyword Arguments A keyword argument is a name-value pair that is passed to the function. Here are some of the advantages:\nIf the values passed with positional arguments are wrong, you will get an error or unexpected behavior. Keyword arguments can be passed in any order. When used with the ** we can pass an arbitrary number of keyword arguments. We can reduce the number of lines in our code. Create a new file called lab_4_keyword_arguments.py Click on the + Click New File to create a new file In the editor add the following: import boto3 def translate_text(text, source_language_code, target_language_code): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text( Text=text, SourceLanguageCode=source_language_code, TargetLanguageCode=target_language_code ) print(response) def main(): translate_text(\u0026#39;I am learning to code in AWS\u0026#39;,\u0026#39;en\u0026#39;,\u0026#39;fr\u0026#39;) if __name__==\u0026#34;__main__\u0026#34;: main() 7. Press Ctrl + s shortcuts.\nIn the Filename section, type lab_4_keyword_arguments.py Click Save Modify the file called lab_4_keyword_arguments.py as follows: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) def main(): translate_text(Text=\u0026#39;I am learning to code in AWS\u0026#39;,SourceLanguageCode=\u0026#39;en\u0026#39;,TargetLanguageCode=\u0026#39;fr\u0026#39;) if __name__==\u0026#34;__main__\u0026#34;: main() We replaced the positional arguments with keyword arguments. This is done using the **kwargs.\nWe removed all the parameters such as Text=text which shortens our code and replaced it with response = client.translate_text(**kwargs).\nWe defined the keyword arguments when we called the function using the syntax Text=\u0026lsquo;I am learning to code in AWS\u0026rsquo;.\nSave To run the program, enter the following command in the terminal: python lab_4_keyword_arguments.py Press Enter. We will see the result. We will swap the order of the keyword arguments around to see that there is any change. Modify the file called lab_4_keyword_arguments.py as follows: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) def main(): translate_text(SourceLanguageCode=\u0026#39;en\u0026#39;,Text=\u0026#39;I am learning to code in AWS\u0026#39;,TargetLanguageCode=\u0026#39;fr\u0026#39;) if __name__==\u0026#34;__main__\u0026#34;: main() Save To run the program, enter the following command in the terminal: python lab_4_keyword_arguments.py Press Enter. We should see the result. We will see the result doesn\u0026rsquo;t have any change. We will see the keyword arguments don\u0026rsquo;t depend on order within the brackets (). We will use dictionaries as keyword arguments Modify the file called lab_4_keyword_arguments.py as follows: import boto3 def translate_text(**kwargs): client = boto3.client(\u0026#39;translate\u0026#39;) response = client.translate_text(**kwargs) print(response) ### Change below this line only ### kwargs={ \u0026#34;Text\u0026#34;:\u0026#34;I am learning to code in AWS\u0026#34;, \u0026#34;SourceLanguageCode\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;TargetLanguageCode\u0026#34;:\u0026#34;fr\u0026#34; } def main(): translate_text(**kwargs) if __name__==\u0026#34;__main__\u0026#34;: main() We defined a variable called kwargs containing a dictionary of key\\:value pairs.\nWe replaced the keyword arguments when we called the function with **kwargs. The ** tells python that it is an arbitrary number of arguments, kwargs is the function name we defined. We put each key\\:value pair on a separate line to make it easy to read.\nSave To run the program, enter the following command in the terminal: python lab_4_keyword_arguments.py Press Enter. We should see the result. "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/8-input/","title":"Inputs","tags":[],"description":"","content":"Overview In this section, we will look at different ways of passing information to our program as inputs from external sources.\nContent: User input from the console CLI Arguments Input from a file JSON "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/9-loop/","title":"Loops","tags":[],"description":"","content":"Overview In this section, we will learn the basics of using loops and then extend our example of using Amazon Translate.\nContent: Simple Loops Looping over JSON List Comprehensions "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/10-if-statements/","title":"If Statements","tags":[],"description":"","content":"Overview In this section, we will introduce:\nIf statements. Else statements. Elif statements. Content: The If - Else Statement Checking Values in a List Elif Add input validation "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/11-logging/","title":"Logging","tags":[],"description":"","content":"Overview In this section we are going to use a function in python for logging.\nContent: Simple Logging Log Level and Log File Add logging to our code "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/12-errors-and-exceptions/","title":"Errors and Exceptions","tags":[],"description":"","content":"Overview In this section, we are going to look at using try-except blocks to manage our exceptions. We will start with a simple example before adding to our code for Amazon Translate.\nContent: A simple example Add Error Handling to the Code "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/13-cleanup/","title":"Clean up resources","tags":[],"description":"","content":"Delete the AWS Cloud9 environment Go to AWS Cloud9 console. Click Account environments. Select LearnPython Click Delete Type Delete to confirm, then click Delete to delete "},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://hotloncon1.github.io/learn-python-on-aws/tags/","title":"Tags","tags":[],"description":"","content":""}]